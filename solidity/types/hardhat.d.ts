/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "ERC721URIStorageUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorageUpgradeable__factory>;
    getContractFactory(
      name: "IERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "CloneFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloneFactory__factory>;
    getContractFactory(
      name: "ContractProbe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractProbe__factory>;
    getContractFactory(
      name: "ICloneFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICloneFactory__factory>;
    getContractFactory(
      name: "IContractProbe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContractProbe__factory>;
    getContractFactory(
      name: "IInterfacesIds",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterfacesIds__factory>;
    getContractFactory(
      name: "INFTsFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTsFactory__factory>;
    getContractFactory(
      name: "IOpenNFTsV0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOpenNFTsV0__factory>;
    getContractFactory(
      name: "IOpenNFTsV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOpenNFTsV1__factory>;
    getContractFactory(
      name: "IOpenNFTsV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOpenNFTsV2__factory>;
    getContractFactory(
      name: "InterfacesIds",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterfacesIds__factory>;
    getContractFactory(
      name: "NFTsFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTsFactory__factory>;
    getContractFactory(
      name: "OpenNFTs",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenNFTs__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "ERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    getContractAt(
      name: "ERC721URIStorageUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorageUpgradeable>;
    getContractAt(
      name: "IERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "CloneFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CloneFactory>;
    getContractAt(
      name: "ContractProbe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractProbe>;
    getContractAt(
      name: "ICloneFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICloneFactory>;
    getContractAt(
      name: "IContractProbe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContractProbe>;
    getContractAt(
      name: "IInterfacesIds",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterfacesIds>;
    getContractAt(
      name: "INFTsFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTsFactory>;
    getContractAt(
      name: "IOpenNFTsV0",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOpenNFTsV0>;
    getContractAt(
      name: "IOpenNFTsV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOpenNFTsV1>;
    getContractAt(
      name: "IOpenNFTsV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOpenNFTsV2>;
    getContractAt(
      name: "InterfacesIds",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterfacesIds>;
    getContractAt(
      name: "NFTsFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTsFactory>;
    getContractAt(
      name: "OpenNFTs",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OpenNFTs>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}

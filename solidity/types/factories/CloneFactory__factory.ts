/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CloneFactory, CloneFactoryInterface } from "../CloneFactory";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "template",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "NewImplementation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "template",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "NewTemplate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "addImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "contractProbe",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "implementations",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementationsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setContractProbe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setDefaultTemplate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "template",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "templates",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6110348061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a25e0d7011610071578063a25e0d7014610154578063b98a474814610170578063bcde32a11461018c578063c17bae4f146101aa578063c6e2a400146101c8578063f2fde38b146101e4576100a9565b806320a99bd0146100ae5780636f2ddd93146100de578063715018a6146100fc578063845affc8146101065780638da5cb5b14610136575b600080fd5b6100c860048036038101906100c39190610c0b565b610200565b6040516100d59190610c47565b60405180910390f35b6100e6610233565b6040516100f39190610c47565b60405180910390f35b610104610259565b005b610120600480360381019061011b9190610c98565b6102e1565b60405161012d9190610c47565b60405180910390f35b61013e610320565b60405161014b9190610c47565b60405180910390f35b61016e60048036038101906101699190610c0b565b610349565b005b61018a60048036038101906101859190610c0b565b610409565b005b6101946105b2565b6040516101a19190610c47565b60405180910390f35b6101b26105d8565b6040516101bf9190610cd4565b60405180910390f35b6101e260048036038101906101dd9190610c0b565b6105e5565b005b6101fe60048036038101906101f99190610c0b565b6106c1565b005b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102616107b9565b73ffffffffffffffffffffffffffffffffffffffff1661027f610320565b73ffffffffffffffffffffffffffffffffffffffff16146102d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cc90610d4c565b60405180910390fd5b6102df60006107c1565b565b600181815481106102f157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103516107b9565b73ffffffffffffffffffffffffffffffffffffffff1661036f610320565b73ffffffffffffffffffffffffffffffffffffffff16146103c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bc90610d4c565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6104116107b9565b73ffffffffffffffffffffffffffffffffffffffff1661042f610320565b73ffffffffffffffffffffffffffffffffffffffff1614610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90610d4c565b60405180910390fd5b60008061049183610885565b915091508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fa90610db8565b60405180910390fd5b8161051257610511836105e5565b5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f81bbf04250a28f0d5979a401ffb6705dcebf8b354060431d672cf1ea4594fc6760405160405180910390a3505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600180549050905090565b6105ed6107b9565b73ffffffffffffffffffffffffffffffffffffffff1661060b610320565b73ffffffffffffffffffffffffffffffffffffffff1614610661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065890610d4c565b60405180910390fd5b60008061066d83610885565b9150915081156106b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a990610e24565b60405180910390fd5b6106bc8382610a52565b505050565b6106c96107b9565b73ffffffffffffffffffffffffffffffffffffffff166106e7610320565b73ffffffffffffffffffffffffffffffffffffffff161461073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490610d4c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490610eb6565b60405180910390fd5b6107b6816107c1565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663275e5da5856040518263ffffffff1660e01b81526004016108e59190610c47565b604080518083038186803b1580156108fc57600080fd5b505afa158015610910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109349190610f23565b80935081925050508061097c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097390610faf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109ba576109b9610fcf565b5b600073ffffffffffffffffffffffffffffffffffffffff16600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415925050915091565b6001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f053585d4de2374a5e4cee65e665171098bd6777e89041c2915cdac4d567cd93f60405160405180910390a45050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bd882610bad565b9050919050565b610be881610bcd565b8114610bf357600080fd5b50565b600081359050610c0581610bdf565b92915050565b600060208284031215610c2157610c20610ba8565b5b6000610c2f84828501610bf6565b91505092915050565b610c4181610bcd565b82525050565b6000602082019050610c5c6000830184610c38565b92915050565b6000819050919050565b610c7581610c62565b8114610c8057600080fd5b50565b600081359050610c9281610c6c565b92915050565b600060208284031215610cae57610cad610ba8565b5b6000610cbc84828501610c83565b91505092915050565b610cce81610c62565b82525050565b6000602082019050610ce96000830184610cc5565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610d36602083610cef565b9150610d4182610d00565b602082019050919050565b60006020820190508181036000830152610d6581610d29565b9050919050565b7f54656d706c617465206973206120436c6f6e6500000000000000000000000000600082015250565b6000610da2601383610cef565b9150610dad82610d6c565b602082019050919050565b60006020820190508181036000830152610dd181610d95565b9050919050565b7f496d706c656d656e746174696f6e20616c726561647920657869737473000000600082015250565b6000610e0e601d83610cef565b9150610e1982610dd8565b602082019050919050565b60006020820190508181036000830152610e3d81610e01565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ea0602683610cef565b9150610eab82610e44565b604082019050919050565b60006020820190508181036000830152610ecf81610e93565b9050919050565b60008115159050919050565b610eeb81610ed6565b8114610ef657600080fd5b50565b600081519050610f0881610ee2565b92915050565b600081519050610f1d81610bdf565b92915050565b60008060408385031215610f3a57610f39610ba8565b5b6000610f4885828601610ef9565b9250506020610f5985828601610f0e565b9150509250929050565b7f4e6f74206120436f6e7472616374000000000000000000000000000000000000600082015250565b6000610f99600e83610cef565b9150610fa482610f63565b602082019050919050565b60006020820190508181036000830152610fc881610f8c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea26469706673582212200d8fd6f8131a01085c528eeb995abb70a733c1a2f07bb81e0ffd8a57bed7520264736f6c63430008090033";

type CloneFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CloneFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CloneFactory__factory extends ContractFactory {
  constructor(...args: CloneFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CloneFactory> {
    return super.deploy(overrides || {}) as Promise<CloneFactory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CloneFactory {
    return super.attach(address) as CloneFactory;
  }
  connect(signer: Signer): CloneFactory__factory {
    return super.connect(signer) as CloneFactory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CloneFactoryInterface {
    return new utils.Interface(_abi) as CloneFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CloneFactory {
    return new Contract(address, _abi, signerOrProvider) as CloneFactory;
  }
}

{
  "address": "0x96bccA8EE5EB047cf5081d2d62577A45f217fAca",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_openNFTs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contractprobe",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "NewImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "NewTemplate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC721",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC721_ENUMERABLE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC721_ENUMERABLE_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC721_METADATA",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC721_METADATA_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC721_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPEN_NFTS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPEN_NFTS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "name": "addImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct NFTsFactory.NftData",
          "name": "nftData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balancesOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct NFTsFactory.NftData[]",
          "name": "nftData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "clone_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "implementations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementationsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_template",
          "type": "address"
        }
      ],
      "name": "setDefaultTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "template",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "templates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d18c5b00a18f9732b8c7304a65528b728693b1be7d813fbfe02757b974e6361",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0x96bccA8EE5EB047cf5081d2d62577A45f217fAca",
    "transactionIndex": 0,
    "gasUsed": "2573095",
    "logsBloom": "0x
    "blockHash": "0xff24ab9e30fb6026b7ccc76f0be0614ce7ee2bdafef882bd4fee96731b83fa7e",
    "transactionHash": "0x4d18c5b00a18f9732b8c7304a65528b728693b1be7d813fbfe02757b974e6361",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9756899,
        "transactionHash": "0x4d18c5b00a18f9732b8c7304a65528b728693b1be7d813fbfe02757b974e6361",
        "address": "0x96bccA8EE5EB047cf5081d2d62577A45f217fAca",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xff24ab9e30fb6026b7ccc76f0be0614ce7ee2bdafef882bd4fee96731b83fa7e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9756899,
        "transactionHash": "0x4d18c5b00a18f9732b8c7304a65528b728693b1be7d813fbfe02757b974e6361",
        "address": "0x96bccA8EE5EB047cf5081d2d62577A45f217fAca",
        "topics": [
          "0x053585d4de2374a5e4cee65e665171098bd6777e89041c2915cdac4d567cd93f",
          "0x000000000000000000000000173e79efaf94c1bdfc8fb6165fa16dad930a03dd",
          "0x000000000000000000000000173e79efaf94c1bdfc8fb6165fa16dad930a03dd",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xff24ab9e30fb6026b7ccc76f0be0614ce7ee2bdafef882bd4fee96731b83fa7e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9756899,
        "transactionHash": "0x4d18c5b00a18f9732b8c7304a65528b728693b1be7d813fbfe02757b974e6361",
        "address": "0x96bccA8EE5EB047cf5081d2d62577A45f217fAca",
        "topics": [
          "0x81bbf04250a28f0d5979a401ffb6705dcebf8b354060431d672cf1ea4594fc67",
          "0x000000000000000000000000173e79efaf94c1bdfc8fb6165fa16dad930a03dd",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xff24ab9e30fb6026b7ccc76f0be0614ce7ee2bdafef882bd4fee96731b83fa7e"
      }
    ],
    "blockNumber": 9756899,
    "cumulativeGasUsed": "2573095",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x173E79EFAF94c1BdFC8FB6165FA16DAd930A03Dd",
    "0xf3b9d0A66C6Ea58595fE4dF60bB37730bCA36B61"
  ],
  "solcInputHash": "1df603fcde2f334b29f7efc95784d5b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_openNFTs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractprobe\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"NewTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC721\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_ENUMERABLE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_ENUMERABLE_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_METADATA\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_METADATA_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPEN_NFTS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPEN_NFTS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"addImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct NFTsFactory.NftData\",\"name\":\"nftData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balancesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct NFTsFactory.NftData[]\",\"name\":\"nftData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"clone_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"setDefaultTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"templates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/NFTsFactory.sol\":\"NFTsFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xaf583f9537cf446d08c33909e52313d349a831f6b88f20361b76474e40b4c36f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"solidity/contracts/CloneFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./interfaces/IContractProbe.sol\\\";\\n\\ncontract CloneFactory is Ownable {\\n  // implementations : template or clone\\n  address[] public implementations;\\n  address public template;\\n\\n  mapping(address => address) public templates;\\n\\n  address private _contractProbe;\\n\\n  event NewImplementation(\\n    address indexed implementation,\\n    address indexed template,\\n    address indexed creator\\n  );\\n  event NewTemplate(address indexed template, address indexed creator);\\n\\n  constructor(address contractProbe) {\\n    _contractProbe = contractProbe;\\n  }\\n\\n  /*\\n   *  ADD Implementation onlyOwner\\n   *\\n   *  _implementation : Implementation address\\n   */\\n  function addImplementation(address _implementation) public onlyOwner {\\n    _addImplementation(_implementation);\\n  }\\n\\n  /*\\n   *  SET default Template to be Cloned\\n   *\\n   *  _template : Template address\\n   */\\n  function setDefaultTemplate(address _template) public onlyOwner {\\n    if (templates[_template] == address(0)) addImplementation(_template);\\n    require(templates[_template] == _template, \\\"Template is a Clone\\\");\\n\\n    template = _template;\\n\\n    emit NewTemplate(_template, msg.sender);\\n  }\\n\\n  /*\\n   *  Implementations count\\n   *\\n   *  returns : Number of implementation\\n   */\\n  function implementationsCount() public view returns (uint256 count) {\\n    return implementations.length;\\n  }\\n\\n  /*\\n   *  ADD Implementation internal\\n   *\\n   *  _implementation : Implementation address\\n   */\\n  function _addImplementation(address _implementation) internal {\\n    require(templates[_implementation] == address(0), \\\"Implementation already exists\\\");\\n\\n    (bool _isContract, address _template) = IContractProbe(_contractProbe).probe(_implementation);\\n\\n    require(_isContract, \\\"Implementation is not a Contract\\\");\\n\\n    implementations.push(_implementation);\\n    templates[_implementation] = _template;\\n\\n    emit NewImplementation(_implementation, _template, msg.sender);\\n  }\\n\\n  /*\\n   *  Clone Template\\n   *\\n   *  returns : Clone Address\\n   */\\n  function _clone() internal virtual returns (address clone_) {\\n    require(template != address(0), \\\"Template doesn't exist\\\");\\n\\n    clone_ = Clones.clone(template);\\n    _addImplementation(clone_);\\n  }\\n}\\n\",\"keccak256\":\"0x0da00720bbe45d88e6eaeb69ca19bc060d769d66ff20daedf6e6f95aadd8e369\",\"license\":\"MIT\"},\"solidity/contracts/NFTsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./CloneFactory.sol\\\";\\nimport \\\"./interfaces/IOpenNFTsV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\ncontract NFTsFactory is CloneFactory {\\n  using ERC165Checker for address;\\n\\n  struct NftData {\\n    address nft;\\n    string name;\\n    string symbol;\\n    uint256 balance;\\n    address owner;\\n  }\\n\\n  uint8 public constant ERC721 = 0;\\n  uint8 public constant ERC721_METADATA = 1;\\n  uint8 public constant ERC721_ENUMERABLE = 2;\\n  uint8 public constant OPEN_NFTS = 3;\\n\\n  bytes4 public constant ERC721_SIG = bytes4(0x80ac58cd);\\n  bytes4 public constant ERC721_METADATA_SIG = bytes4(0x780e9d63);\\n  bytes4 public constant ERC721_ENUMERABLE_SIG = bytes4(0x780e9d63);\\n  bytes4 public constant OPEN_NFTS_SIG = type(IOpenNFTsV2).interfaceId;\\n\\n  constructor(address _openNFTs, address _contractprobe) CloneFactory(_contractprobe) {\\n    setDefaultTemplate(_openNFTs);\\n  }\\n\\n  function withdrawEther() external onlyOwner {\\n    (bool succeed, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n    require(succeed, \\\"Failed to withdraw Ether\\\");\\n  }\\n\\n  function balancesOf(address owner) external view returns (NftData[] memory nftData) {\\n    nftData = new NftData[](implementations.length);\\n    for (uint256 i = 0; i < implementations.length; i += 1) {\\n      nftData[i] = balanceOf(implementations[i], owner);\\n    }\\n  }\\n\\n  function clone(string memory _name, string memory _symbol) public returns (address clone_) {\\n    clone_ = _clone();\\n    require(clone_.supportsInterface(OPEN_NFTS_SIG), \\\"Clone is not Open NFTs contract\\\");\\n\\n    IOpenNFTsV2(clone_).initialize(_name, _symbol);\\n    IOpenNFTsV2(clone_).transferOwnership(msg.sender);\\n  }\\n\\n  function balanceOf(address nft, address owner) public view returns (NftData memory nftData) {\\n    bytes4[] memory iface = new bytes4[](4);\\n    iface[ERC721] = ERC721_SIG;\\n    iface[ERC721_METADATA] = ERC721_METADATA_SIG;\\n    iface[ERC721_ENUMERABLE] = ERC721_ENUMERABLE_SIG;\\n    iface[OPEN_NFTS] = OPEN_NFTS_SIG;\\n    bool[] memory supportInterface = nft.getSupportedInterfaces(iface);\\n\\n    if (supportInterface[ERC721]) {\\n      nftData.nft = nft;\\n\\n      if (supportInterface[ERC721_METADATA]) {\\n        nftData.name = IERC721Metadata(nft).name();\\n        nftData.symbol = IERC721Metadata(nft).symbol();\\n      }\\n\\n      if (owner == address(0)) {\\n        if (supportInterface[ERC721_ENUMERABLE]) {\\n          nftData.balance = IERC721Enumerable(nft).totalSupply();\\n        }\\n      } else {\\n        nftData.balance = IERC721(nft).balanceOf(owner);\\n      }\\n\\n      if (supportInterface[OPEN_NFTS]) {\\n        nftData.owner = IOpenNFTsV2(nft).owner();\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd05d6be6a852de58f0b278b9576cc9878e62dba4942074d46a77c1d87dc89358\",\"license\":\"MIT\"},\"solidity/contracts/interfaces/IContractProbe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IContractProbe {\\n  function probe(address _address) external view returns (bool isContract, address forwardedTo);\\n}\\n\",\"keccak256\":\"0x9dda006140d37bf757a3a36e50ea5552ce383b86133cd4b288ab23f500d32d86\",\"license\":\"MIT\"},\"solidity/contracts/interfaces/IOpenNFTsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOpenNFTsV2 {\\n  function transferOwnership(address newOwner) external;\\n\\n  function initialize(string memory name_, string memory symbol_) external;\\n\\n  function mintNFT(address minter, string memory jsonURI) external returns (uint256);\\n\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xba71fb07b1ac2e87f56faa2cccc01dbd0163454965ce1e77556e32e821aa2e42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80638425abff116100b8578063c17bae4f1161007c578063c17bae4f1461031c578063c6e2a4001461033a578063d33cdd7414610356578063f2fde38b14610374578063f7888aec14610390578063f7f5d46d146103c057610137565b80638425abff14610264578063845affc8146102825780638da5cb5b146102b257806393199bcf146102d0578063b98a47481461030057610137565b80636cc41ea9116100ff5780636cc41ea9146101f65780636f2ddd9314610214578063715018a6146102325780637362377b1461023c5780637d19ec931461024657610137565b80630a7c6d191461013c57806320a99bd01461015a5780632bf0d0711461018a5780636392a51f146101a85780636bc259cc146101d8575b600080fd5b6101446103de565b6040516101519190611bdf565b60405180910390f35b610174600480360381019061016f9190611c6c565b6103e9565b6040516101819190611ca8565b60405180910390f35b61019261041c565b60405161019f9190611cdf565b60405180910390f35b6101c260048036038101906101bd9190611c6c565b610421565b6040516101cf9190611efa565b60405180910390f35b6101e061050e565b6040516101ed9190611bdf565b60405180910390f35b6101fe610519565b60405161020b9190611bdf565b60405180910390f35b61021c61053d565b6040516102299190611ca8565b60405180910390f35b61023a610563565b005b6102446105eb565b005b61024e610716565b60405161025b9190611bdf565b60405180910390f35b61026c610721565b6040516102799190611cdf565b60405180910390f35b61029c60048036038101906102979190611f48565b610726565b6040516102a99190611ca8565b60405180910390f35b6102ba610765565b6040516102c79190611ca8565b60405180910390f35b6102ea60048036038101906102e591906120aa565b61078e565b6040516102f79190611ca8565b60405180910390f35b61031a60048036038101906103159190611c6c565b610900565b005b610324610b85565b6040516103319190612131565b60405180910390f35b610354600480360381019061034f9190611c6c565b610b92565b005b61035e610c1a565b60405161036b9190611cdf565b60405180910390f35b61038e60048036038101906103899190611c6c565b610c1f565b005b6103aa60048036038101906103a5919061214c565b610d17565b6040516103b79190612209565b60405180910390f35b6103c8611352565b6040516103d59190611cdf565b60405180910390f35b63780e9d6360e01b81565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600181565b606060018054905067ffffffffffffffff81111561044257610441611f7f565b5b60405190808252806020026020018201604052801561047b57816020015b610468611b49565b8152602001906001900390816104605790505b50905060005b600180549050811015610508576104d6600182815481106104a5576104a461222b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610d17565b8282815181106104e9576104e861222b565b5b60200260200101819052506001816105019190612289565b9050610481565b50919050565b6380ac58cd60e01b81565b7fd94a1db20000000000000000000000000000000000000000000000000000000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61056b611357565b73ffffffffffffffffffffffffffffffffffffffff16610589610765565b73ffffffffffffffffffffffffffffffffffffffff16146105df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d69061233c565b60405180910390fd5b6105e9600061135f565b565b6105f3611357565b73ffffffffffffffffffffffffffffffffffffffff16610611610765565b73ffffffffffffffffffffffffffffffffffffffff1614610667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065e9061233c565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161068d9061238d565b60006040518083038185875af1925050503d80600081146106ca576040519150601f19603f3d011682016040523d82523d6000602084013e6106cf565b606091505b5050905080610713576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070a906123ee565b60405180910390fd5b50565b63780e9d6360e01b81565b600081565b6001818154811061073657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610798611423565b90506107e37fd94a1db2000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff166114ef90919063ffffffff16565b610822576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108199061245a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16634cd88b7684846040518363ffffffff1660e01b815260040161085d9291906124b3565b600060405180830381600087803b15801561087757600080fd5b505af115801561088b573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b81526004016108c89190611ca8565b600060405180830381600087803b1580156108e257600080fd5b505af11580156108f6573d6000803e3d6000fd5b5050505092915050565b610908611357565b73ffffffffffffffffffffffffffffffffffffffff16610926610765565b73ffffffffffffffffffffffffffffffffffffffff161461097c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109739061233c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a1a57610a1981610b92565b5b8073ffffffffffffffffffffffffffffffffffffffff16600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade90612536565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f81bbf04250a28f0d5979a401ffb6705dcebf8b354060431d672cf1ea4594fc6760405160405180910390a350565b6000600180549050905090565b610b9a611357565b73ffffffffffffffffffffffffffffffffffffffff16610bb8610765565b73ffffffffffffffffffffffffffffffffffffffff1614610c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c059061233c565b60405180910390fd5b610c1781611514565b50565b600281565b610c27611357565b73ffffffffffffffffffffffffffffffffffffffff16610c45610765565b73ffffffffffffffffffffffffffffffffffffffff1614610c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c929061233c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d02906125c8565b60405180910390fd5b610d148161135f565b50565b610d1f611b49565b6000600467ffffffffffffffff811115610d3c57610d3b611f7f565b5b604051908082528060200260200182016040528015610d6a5781602001602082028036833780820191505090505b5090506380ac58cd60e01b81600060ff1681518110610d8c57610d8b61222b565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505063780e9d6360e01b81600160ff1681518110610df757610df661222b565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505063780e9d6360e01b81600260ff1681518110610e6257610e6161222b565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250507fd94a1db20000000000000000000000000000000000000000000000000000000081600360ff1681518110610ee657610ee561222b565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250506000610f5d828673ffffffffffffffffffffffffffffffffffffffff1661182a90919063ffffffff16565b905080600060ff1681518110610f7657610f7561222b565b5b60200260200101511561134a5784836000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080600160ff1681518110610fd257610fd161222b565b5b6020026020010151156110f6578473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110629190612658565b83602001819052508473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156110b057600080fd5b505afa1580156110c4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110ed9190612658565b83604001819052505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156111dc5780600260ff16815181106111425761114161222b565b5b6020026020010151156111d7578473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561119557600080fd5b505afa1580156111a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cd91906126b6565b8360600181815250505b61126f565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016112159190611ca8565b60206040518083038186803b15801561122d57600080fd5b505afa158015611241573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126591906126b6565b8360600181815250505b80600360ff16815181106112865761128561222b565b5b602002602001015115611349578473ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112d957600080fd5b505afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131191906126f8565b836080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b5b505092915050565b600381565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156114b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ad90612771565b60405180910390fd5b6114e1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166118fc565b90506114ec81611514565b90565b60006114fa836119d1565b801561150c575061150b8383611a1e565b5b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d9906127dd565b60405180910390fd5b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663275e5da5846040518263ffffffff1660e01b81526004016116409190611ca8565b604080518083038186803b15801561165757600080fd5b505afa15801561166b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168f9190612835565b91509150816116d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ca906128c1565b60405180910390fd5b6001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f053585d4de2374a5e4cee65e665171098bd6777e89041c2915cdac4d567cd93f60405160405180910390a4505050565b60606000825167ffffffffffffffff81111561184957611848611f7f565b5b6040519080825280602002602001820160405280156118775781602001602082028036833780820191505090505b509050611883846119d1565b156118f25760005b83518110156118f0576118b8858583815181106118ab576118aa61222b565b5b6020026020010151611a1e565b8282815181106118cb576118ca61222b565b5b60200260200101901515908115158152505080806118e8906128e1565b91505061188b565b505b8091505092915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c390612976565b60405180910390fd5b919050565b60006119fd827f01ffc9a700000000000000000000000000000000000000000000000000000000611a1e565b8015611a175750611a158263ffffffff60e01b611a1e565b155b9050919050565b6000806301ffc9a760e01b83604051602401611a3a9190611bdf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000808573ffffffffffffffffffffffffffffffffffffffff1661753084604051611ac491906129d2565b6000604051808303818686fa925050503d8060008114611b00576040519150601f19603f3d011682016040523d82523d6000602084013e611b05565b606091505b5091509150602081511015611b205760009350505050611b43565b818015611b3d575080806020019051810190611b3c91906129e9565b5b93505050505b92915050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611bd981611ba4565b82525050565b6000602082019050611bf46000830184611bd0565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c3982611c0e565b9050919050565b611c4981611c2e565b8114611c5457600080fd5b50565b600081359050611c6681611c40565b92915050565b600060208284031215611c8257611c81611c04565b5b6000611c9084828501611c57565b91505092915050565b611ca281611c2e565b82525050565b6000602082019050611cbd6000830184611c99565b92915050565b600060ff82169050919050565b611cd981611cc3565b82525050565b6000602082019050611cf46000830184611cd0565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611d2f81611c2e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d6f578082015181840152602081019050611d54565b83811115611d7e576000848401525b50505050565b6000601f19601f8301169050919050565b6000611da082611d35565b611daa8185611d40565b9350611dba818560208601611d51565b611dc381611d84565b840191505092915050565b6000819050919050565b611de181611dce565b82525050565b600060a083016000830151611dff6000860182611d26565b5060208301518482036020860152611e178282611d95565b91505060408301518482036040860152611e318282611d95565b9150506060830151611e466060860182611dd8565b506080830151611e596080860182611d26565b508091505092915050565b6000611e708383611de7565b905092915050565b6000602082019050919050565b6000611e9082611cfa565b611e9a8185611d05565b935083602082028501611eac85611d16565b8060005b85811015611ee85784840389528151611ec98582611e64565b9450611ed483611e78565b925060208a01995050600181019050611eb0565b50829750879550505050505092915050565b60006020820190508181036000830152611f148184611e85565b905092915050565b611f2581611dce565b8114611f3057600080fd5b50565b600081359050611f4281611f1c565b92915050565b600060208284031215611f5e57611f5d611c04565b5b6000611f6c84828501611f33565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fb782611d84565b810181811067ffffffffffffffff82111715611fd657611fd5611f7f565b5b80604052505050565b6000611fe9611bfa565b9050611ff58282611fae565b919050565b600067ffffffffffffffff82111561201557612014611f7f565b5b61201e82611d84565b9050602081019050919050565b82818337600083830152505050565b600061204d61204884611ffa565b611fdf565b90508281526020810184848401111561206957612068611f7a565b5b61207484828561202b565b509392505050565b600082601f83011261209157612090611f75565b5b81356120a184826020860161203a565b91505092915050565b600080604083850312156120c1576120c0611c04565b5b600083013567ffffffffffffffff8111156120df576120de611c09565b5b6120eb8582860161207c565b925050602083013567ffffffffffffffff81111561210c5761210b611c09565b5b6121188582860161207c565b9150509250929050565b61212b81611dce565b82525050565b60006020820190506121466000830184612122565b92915050565b6000806040838503121561216357612162611c04565b5b600061217185828601611c57565b925050602061218285828601611c57565b9150509250929050565b600060a0830160008301516121a46000860182611d26565b50602083015184820360208601526121bc8282611d95565b915050604083015184820360408601526121d68282611d95565b91505060608301516121eb6060860182611dd8565b5060808301516121fe6080860182611d26565b508091505092915050565b60006020820190508181036000830152612223818461218c565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061229482611dce565b915061229f83611dce565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122d4576122d361225a565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006123266020836122df565b9150612331826122f0565b602082019050919050565b6000602082019050818103600083015261235581612319565b9050919050565b600081905092915050565b50565b600061237760008361235c565b915061238282612367565b600082019050919050565b60006123988261236a565b9150819050919050565b7f4661696c656420746f2077697468647261772045746865720000000000000000600082015250565b60006123d86018836122df565b91506123e3826123a2565b602082019050919050565b60006020820190508181036000830152612407816123cb565b9050919050565b7f436c6f6e65206973206e6f74204f70656e204e46547320636f6e747261637400600082015250565b6000612444601f836122df565b915061244f8261240e565b602082019050919050565b6000602082019050818103600083015261247381612437565b9050919050565b600061248582611d35565b61248f81856122df565b935061249f818560208601611d51565b6124a881611d84565b840191505092915050565b600060408201905081810360008301526124cd818561247a565b905081810360208301526124e1818461247a565b90509392505050565b7f54656d706c617465206973206120436c6f6e6500000000000000000000000000600082015250565b60006125206013836122df565b915061252b826124ea565b602082019050919050565b6000602082019050818103600083015261254f81612513565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006125b26026836122df565b91506125bd82612556565b604082019050919050565b600060208201905081810360008301526125e1816125a5565b9050919050565b60006125fb6125f684611ffa565b611fdf565b90508281526020810184848401111561261757612616611f7a565b5b612622848285611d51565b509392505050565b600082601f83011261263f5761263e611f75565b5b815161264f8482602086016125e8565b91505092915050565b60006020828403121561266e5761266d611c04565b5b600082015167ffffffffffffffff81111561268c5761268b611c09565b5b6126988482850161262a565b91505092915050565b6000815190506126b081611f1c565b92915050565b6000602082840312156126cc576126cb611c04565b5b60006126da848285016126a1565b91505092915050565b6000815190506126f281611c40565b92915050565b60006020828403121561270e5761270d611c04565b5b600061271c848285016126e3565b91505092915050565b7f54656d706c61746520646f65736e277420657869737400000000000000000000600082015250565b600061275b6016836122df565b915061276682612725565b602082019050919050565b6000602082019050818103600083015261278a8161274e565b9050919050565b7f496d706c656d656e746174696f6e20616c726561647920657869737473000000600082015250565b60006127c7601d836122df565b91506127d282612791565b602082019050919050565b600060208201905081810360008301526127f6816127ba565b9050919050565b60008115159050919050565b612812816127fd565b811461281d57600080fd5b50565b60008151905061282f81612809565b92915050565b6000806040838503121561284c5761284b611c04565b5b600061285a85828601612820565b925050602061286b858286016126e3565b9150509250929050565b7f496d706c656d656e746174696f6e206973206e6f74206120436f6e7472616374600082015250565b60006128ab6020836122df565b91506128b682612875565b602082019050919050565b600060208201905081810360008301526128da8161289e565b9050919050565b60006128ec82611dce565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561291f5761291e61225a565b5b600182019050919050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b60006129606016836122df565b915061296b8261292a565b602082019050919050565b6000602082019050818103600083015261298f81612953565b9050919050565b600081519050919050565b60006129ac82612996565b6129b6818561235c565b93506129c6818560208601611d51565b80840191505092915050565b60006129de82846129a1565b915081905092915050565b6000602082840312156129ff576129fe611c04565b5b6000612a0d84828501612820565b9150509291505056fea2646970667358221220c59bc201a7c84f08c69de575678488ef2f0f5fce5c81f6037427ff2fa619541a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "solidity/contracts/NFTsFactory.sol:NFTsFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 603,
        "contract": "solidity/contracts/NFTsFactory.sol:NFTsFactory",
        "label": "implementations",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 605,
        "contract": "solidity/contracts/NFTsFactory.sol:NFTsFactory",
        "label": "template",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 609,
        "contract": "solidity/contracts/NFTsFactory.sol:NFTsFactory",
        "label": "templates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 611,
        "contract": "solidity/contracts/NFTsFactory.sol:NFTsFactory",
        "label": "_contractProbe",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}
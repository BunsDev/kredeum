{
  "address": "0xd8F4861Aa860Bc8993c839d59CF874BEc77F2B76",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isTemplate",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "NewImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isTemplate",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "addImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "_clone",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_template",
          "type": "address"
        }
      ],
      "name": "template",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "template",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "templates",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3e6ad6b142adfd111134c49f2844f3dedd254f8c6ed3648b6dad0d4a4b65dfd",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0xd8F4861Aa860Bc8993c839d59CF874BEc77F2B76",
    "transactionIndex": 4,
    "gasUsed": "470896",
    "logsBloom": "0x
    "blockHash": "0x2eff5cd0817648134e8bc03a45f773ab12b5af77dd2926b5a67f980a9eaf0fd5",
    "transactionHash": "0xd3e6ad6b142adfd111134c49f2844f3dedd254f8c6ed3648b6dad0d4a4b65dfd",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 9148413,
        "transactionHash": "0xd3e6ad6b142adfd111134c49f2844f3dedd254f8c6ed3648b6dad0d4a4b65dfd",
        "address": "0xd8F4861Aa860Bc8993c839d59CF874BEc77F2B76",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x2eff5cd0817648134e8bc03a45f773ab12b5af77dd2926b5a67f980a9eaf0fd5"
      }
    ],
    "blockNumber": 9148413,
    "cumulativeGasUsed": "672944",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c5255ee012637e6e17f6f60c1e702ac1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isTemplate\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isTemplate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"addImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_clone\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"template\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/CloneFactory.sol\":\"CloneFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"solidity/contracts/CloneFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract CloneFactory is Ownable {\\n    address[] _templates;\\n    address[] _implementations;\\n\\n    event NewImplementation(\\n        address implementation,\\n        uint256 indexed version,\\n        bool indexed isTemplate,\\n        address indexed creator\\n    );\\n\\n    constructor() {}\\n\\n    /*\\n     *  SET Template\\n     *\\n     *  _template : Template to clone\\n     */\\n    function template(address _template) public onlyOwner {\\n        _templates.push(_template);\\n        addImplementation(_template, version(), true, owner());\\n    }\\n\\n    /*\\n     *  Clone the Template\\n     *\\n     *  returns : Clone Address\\n     */\\n    function clone() external returns (address _clone) {\\n        _clone = Clones.clone(template());\\n        addImplementation(_clone, version(), false, msg.sender);\\n    }\\n\\n    /*\\n     *  ADD Clone\\n     *\\n     *  _clone : existing clone address\\n     *  _version : existing clone version\\n     */\\n    function addImplementation(\\n        address _implementation,\\n        uint256 _version,\\n        bool _isTemplate,\\n        address _creator\\n    ) public onlyOwner {\\n        _implementations.push(_implementation);\\n\\n        emit NewImplementation(\\n            _implementation,\\n            _version,\\n            _isTemplate,\\n            _creator\\n        );\\n    }\\n\\n    /*\\n     *  GET Version\\n     *\\n     *  returns : Template Version\\n     */\\n    function version() public view returns (uint256) {\\n        return _templates.length - 1;\\n    }\\n\\n    /*\\n     *  GET Template\\n     *\\n     *  returns : Current Template\\n     */\\n    function template() public view returns (address) {\\n        return _templates[version()];\\n    }\\n\\n    /*\\n     *  GET Templates\\n     *\\n     *  returns : all Templates\\n     */\\n    function templates() public view returns (address[] memory) {\\n        return _templates;\\n    }\\n\\n    /*\\n     *  GET Implementations\\n     *\\n     *  returns : all Implementations\\n     */\\n    function implementations() public view returns (address[] memory) {\\n        return _implementations;\\n    }\\n}\\n\",\"keccak256\":\"0xf38807fba03b0ded9da9ff7c5bfe9ec46f464b83031d28396c8ea381070b3a8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107198061007e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80636f2ddd93116100665780636f2ddd9314610110578063715018a6146101185780638da5cb5b14610120578063d3792d8414610131578063f2fde38b1461014457600080fd5b806309ed4607146100a357806330e9012c146100c85780633a283d7d146100dd57806354fd4d50146100e55780635e3573cc146100fb575b600080fd5b6100ab610157565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d0610182565b6040516100bf919061063e565b6100d06101e4565b6100ed610244565b6040519081526020016100bf565b61010e6101093660046105cb565b610259565b005b6100ab6102f9565b61010e61033d565b6000546001600160a01b03166100ab565b61010e61013f3660046105ec565b610373565b61010e6101523660046105cb565b61042f565b60006101696101646102f9565b6104c7565b905061017f81610177610244565b600033610373565b90565b606060028054806020026020016040519081016040528092919081815260200182805480156101da57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101bc575b5050505050905090565b606060018054806020026020016040519081016040528092919081815260200182805480156101da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101bc575050505050905090565b60018054600091610254916106c0565b905090565b6000546001600160a01b0316331461028c5760405162461bcd60e51b81526004016102839061068b565b60405180910390fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383161790556102f6816102e2610244565b600161013f6000546001600160a01b031690565b50565b60006001610305610244565b8154811061032357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316919050565b6000546001600160a01b031633146103675760405162461bcd60e51b81526004016102839061068b565b6103716000610564565b565b6000546001600160a01b0316331461039d5760405162461bcd60e51b81526004016102839061068b565b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b03868116918217909255604051908152908216908315159085907f2077edebf3396cf4fba761aaf2df57f3c48736da9c066a9ca9e6475dce2a89ff9060200160405180910390a450505050565b6000546001600160a01b031633146104595760405162461bcd60e51b81526004016102839061068b565b6001600160a01b0381166104be5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610283565b6102f681610564565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661055f5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610283565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461055f57600080fd5b6000602082840312156105dc578081fd5b6105e5826105b4565b9392505050565b60008060008060808587031215610601578283fd5b61060a856105b4565b93506020850135925060408501358015158114610625578283fd5b9150610633606086016105b4565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561067f5783516001600160a01b03168352928401929184019160010161065a565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000828210156106de57634e487b7160e01b81526011600452602481fd5b50039056fea2646970667358221220b5a9d1dd3bfb626441b74f35b3c6e0f4685e4b15834d4dafd35995134aee7a5664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80636f2ddd93116100665780636f2ddd9314610110578063715018a6146101185780638da5cb5b14610120578063d3792d8414610131578063f2fde38b1461014457600080fd5b806309ed4607146100a357806330e9012c146100c85780633a283d7d146100dd57806354fd4d50146100e55780635e3573cc146100fb575b600080fd5b6100ab610157565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d0610182565b6040516100bf919061063e565b6100d06101e4565b6100ed610244565b6040519081526020016100bf565b61010e6101093660046105cb565b610259565b005b6100ab6102f9565b61010e61033d565b6000546001600160a01b03166100ab565b61010e61013f3660046105ec565b610373565b61010e6101523660046105cb565b61042f565b60006101696101646102f9565b6104c7565b905061017f81610177610244565b600033610373565b90565b606060028054806020026020016040519081016040528092919081815260200182805480156101da57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101bc575b5050505050905090565b606060018054806020026020016040519081016040528092919081815260200182805480156101da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101bc575050505050905090565b60018054600091610254916106c0565b905090565b6000546001600160a01b0316331461028c5760405162461bcd60e51b81526004016102839061068b565b60405180910390fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383161790556102f6816102e2610244565b600161013f6000546001600160a01b031690565b50565b60006001610305610244565b8154811061032357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316919050565b6000546001600160a01b031633146103675760405162461bcd60e51b81526004016102839061068b565b6103716000610564565b565b6000546001600160a01b0316331461039d5760405162461bcd60e51b81526004016102839061068b565b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b03868116918217909255604051908152908216908315159085907f2077edebf3396cf4fba761aaf2df57f3c48736da9c066a9ca9e6475dce2a89ff9060200160405180910390a450505050565b6000546001600160a01b031633146104595760405162461bcd60e51b81526004016102839061068b565b6001600160a01b0381166104be5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610283565b6102f681610564565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661055f5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610283565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461055f57600080fd5b6000602082840312156105dc578081fd5b6105e5826105b4565b9392505050565b60008060008060808587031215610601578283fd5b61060a856105b4565b93506020850135925060408501358015158114610625578283fd5b9150610633606086016105b4565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561067f5783516001600160a01b03168352928401929184019160010161065a565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000828210156106de57634e487b7160e01b81526011600452602481fd5b50039056fea2646970667358221220b5a9d1dd3bfb626441b74f35b3c6e0f4685e4b15834d4dafd35995134aee7a5664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "solidity/contracts/CloneFactory.sol:CloneFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4268,
        "contract": "solidity/contracts/CloneFactory.sol:CloneFactory",
        "label": "_templates",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4271,
        "contract": "solidity/contracts/CloneFactory.sol:CloneFactory",
        "label": "_implementations",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}
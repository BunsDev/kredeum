{
  "address": "0xD9eaC415409f4c80B52a237eE3275bc68497874F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cloneCost",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_openNFTs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contractprobe",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "cloneCost",
          "type": "uint256"
        }
      ],
      "name": "NewCloneCost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "NewImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "NewTemplate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "name": "addImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct NFTsFactory.NftData",
          "name": "nftData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balancesOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct NFTsFactory.NftData[]",
          "name": "nftData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "clone_",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cloneCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "implementations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementationsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cloneCost",
          "type": "uint256"
        }
      ],
      "name": "setCloneCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_template",
          "type": "address"
        }
      ],
      "name": "setDefaultTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "template",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "templates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b663f866eb5ad6072dc7c2435e7e7fca2a5f5195ca540652a13564f21d0ac82",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0xD9eaC415409f4c80B52a237eE3275bc68497874F",
    "transactionIndex": 0,
    "gasUsed": "1561812",
    "logsBloom": "0x002000000000000200000000000000000000204000000000008000000000100000000000000020000080000000000000000080000000000000000001000000000000000000840000000000002000008000010000000000000001000000000000000000000200000000000000000008000000000000000000800000000000004000000000000000000000000000000000000000000000000000000000000000002000000000010000a0000000000000000001000000000000000000000000004000000000048000000001000001100000020000000800000000100000000024000000000000000800000000000000000001000000000000000000000000100000",
    "blockHash": "0x892c5c9433c03f114eaa71620b5ffa83fe4fd8195dd99d0d7184707728e18778",
    "transactionHash": "0x8b663f866eb5ad6072dc7c2435e7e7fca2a5f5195ca540652a13564f21d0ac82",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19513649,
        "transactionHash": "0x8b663f866eb5ad6072dc7c2435e7e7fca2a5f5195ca540652a13564f21d0ac82",
        "address": "0xD9eaC415409f4c80B52a237eE3275bc68497874F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x892c5c9433c03f114eaa71620b5ffa83fe4fd8195dd99d0d7184707728e18778"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19513649,
        "transactionHash": "0x8b663f866eb5ad6072dc7c2435e7e7fca2a5f5195ca540652a13564f21d0ac82",
        "address": "0xD9eaC415409f4c80B52a237eE3275bc68497874F",
        "topics": [
          "0x4eed351187cc44c6711538dfedd75057d4e6ea7896b8703c89dec90e2e2bba58",
          "0x000000000000000000000000000000000000000000000000002386f26fc10000"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x892c5c9433c03f114eaa71620b5ffa83fe4fd8195dd99d0d7184707728e18778"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19513649,
        "transactionHash": "0x8b663f866eb5ad6072dc7c2435e7e7fca2a5f5195ca540652a13564f21d0ac82",
        "address": "0xD9eaC415409f4c80B52a237eE3275bc68497874F",
        "topics": [
          "0x053585d4de2374a5e4cee65e665171098bd6777e89041c2915cdac4d567cd93f",
          "0x00000000000000000000000094f842706ceb375bf0d2602e61d13d449c0e150f",
          "0x00000000000000000000000094f842706ceb375bf0d2602e61d13d449c0e150f",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x892c5c9433c03f114eaa71620b5ffa83fe4fd8195dd99d0d7184707728e18778"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19513649,
        "transactionHash": "0x8b663f866eb5ad6072dc7c2435e7e7fca2a5f5195ca540652a13564f21d0ac82",
        "address": "0xD9eaC415409f4c80B52a237eE3275bc68497874F",
        "topics": [
          "0x81bbf04250a28f0d5979a401ffb6705dcebf8b354060431d672cf1ea4594fc67",
          "0x00000000000000000000000094f842706ceb375bf0d2602e61d13d449c0e150f",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x892c5c9433c03f114eaa71620b5ffa83fe4fd8195dd99d0d7184707728e18778"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19513649,
        "transactionHash": "0x8b663f866eb5ad6072dc7c2435e7e7fca2a5f5195ca540652a13564f21d0ac82",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000006ef931dd51a000000000000000000000000000000000000000000000000000010730fe99fb47ad00000000000000000000000000000000000000000000017ddc1bf3d71784e323000000000000000000000000000000000000000000000000009837ccbca9a7ad00000000000000000000000000000000000000000000017ddc8aed08f4d68323",
        "logIndex": 4,
        "blockHash": "0x892c5c9433c03f114eaa71620b5ffa83fe4fd8195dd99d0d7184707728e18778"
      }
    ],
    "blockNumber": 19513649,
    "cumulativeGasUsed": "1561812",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    "0x94f842706ceb375BF0d2602E61D13D449c0e150f",
    "0xe5D79962aC85A131BcAE1ffeFe82CBfcF2858eB9"
  ],
  "solcInputHash": "ba43d7411b5606fa3b029a9f009b724d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cloneCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_openNFTs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractprobe\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cloneCost\",\"type\":\"uint256\"}],\"name\":\"NewCloneCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"NewTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"addImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct NFTsFactory.NftData\",\"name\":\"nftData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balancesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct NFTsFactory.NftData[]\",\"name\":\"nftData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"clone_\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cloneCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cloneCost\",\"type\":\"uint256\"}],\"name\":\"setCloneCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"setDefaultTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"templates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/NFTsFactory.sol\":\"NFTsFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xaf583f9537cf446d08c33909e52313d349a831f6b88f20361b76474e40b4c36f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"solidity/contracts/CloneFactory.sol\":{\"content\":\"contract Name {\\n\\n} // SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./interfaces/IContractProbe.sol\\\";\\n\\ncontract CloneFactory is Ownable {\\n  // implementations : template or clone\\n  address[] public implementations;\\n  address public template;\\n\\n  mapping(address => address) public templates;\\n\\n  address private contractProbe;\\n\\n  event NewImplementation(\\n    address indexed implementation,\\n    address indexed template,\\n    address indexed creator\\n  );\\n  event NewTemplate(address indexed template, address indexed creator);\\n\\n  constructor(address _contractProbe) {\\n    contractProbe = _contractProbe;\\n  }\\n\\n  /*\\n   *  ADD Implementation onlyOwner\\n   *\\n   *  _implementation : Implementation address\\n   */\\n  function addImplementation(address _implementation) public onlyOwner {\\n    _addImplementation(_implementation);\\n  }\\n\\n  /*\\n   *  SET default Template to be Cloned\\n   *\\n   *  _template : Template address\\n   */\\n  function setDefaultTemplate(address _template) public onlyOwner {\\n    if (templates[_template] == address(0)) addImplementation(_template);\\n    require(templates[_template] == _template, \\\"Template is a Clone\\\");\\n\\n    template = _template;\\n\\n    emit NewTemplate(_template, msg.sender);\\n  }\\n\\n  /*\\n   *  Implementations count\\n   *\\n   *  returns : Number of implementation\\n   */\\n  function implementationsCount() public view returns (uint256 count) {\\n    return implementations.length;\\n  }\\n\\n  /*\\n   *  ADD Implementation internal\\n   *\\n   *  _implementation : Implementation address\\n   */\\n  function _addImplementation(address _implementation) internal {\\n    require(templates[_implementation] == address(0), \\\"Implementation already exists\\\");\\n\\n    (bool _isContract, address _template) = IContractProbe(contractProbe).probe(_implementation);\\n\\n    require(_isContract, \\\"Implementation is not a Contract\\\");\\n\\n    implementations.push(_implementation);\\n    templates[_implementation] = _template;\\n\\n    emit NewImplementation(_implementation, _template, msg.sender);\\n  }\\n\\n  /*\\n   *  Clone Template\\n   *\\n   *  returns : Clone Address\\n   */\\n  function _clone() internal virtual returns (address clone_) {\\n    require(template != address(0), \\\"Template doesn't exist\\\");\\n\\n    clone_ = Clones.clone(template);\\n    _addImplementation(clone_);\\n  }\\n}\\n\",\"keccak256\":\"0x11906476f21e0a624a24ba4e21db2edd91729548fa310aef0b05b8bf23f183b9\",\"license\":\"MIT\"},\"solidity/contracts/NFTsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./CloneFactory.sol\\\";\\nimport \\\"./interfaces/IOpenNFTs.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\ncontract NFTsFactory is CloneFactory {\\n  using ERC165Checker for address;\\n\\n  uint256 public cloneCost;\\n\\n  uint8 constant ERC721 = 0;\\n  uint8 constant ERC721Metadata = 1;\\n  uint8 constant ERC721Enumerable = 2;\\n  uint8 constant OpenNFTs = 3;\\n\\n  bytes4 constant ERC721Sig = bytes4(0x80ac58cd);\\n  bytes4 constant ERC721MetadataSig = bytes4(0x780e9d63);\\n  bytes4 constant ERC721EnumerableSig = bytes4(0x780e9d63);\\n  bytes4 constant OpenNFTsSig = type(IOpenNFTs).interfaceId;\\n\\n  struct NftData {\\n    address nft;\\n    string name;\\n    string symbol;\\n    uint256 balance;\\n    address owner;\\n  }\\n  event NewCloneCost(uint256 indexed cloneCost);\\n\\n  constructor(\\n    uint256 _cloneCost,\\n    address _openNFTs,\\n    address _contractprobe\\n  ) CloneFactory(_contractprobe) {\\n    setCloneCost(_cloneCost);\\n    setDefaultTemplate(_openNFTs);\\n  }\\n\\n  function balanceOf(address nft, address owner) public view returns (NftData memory nftData) {\\n    bytes4[] memory iface = new bytes4[](4);\\n    iface[ERC721] = ERC721Sig;\\n    iface[ERC721Metadata] = ERC721MetadataSig;\\n    iface[ERC721Enumerable] = ERC721EnumerableSig;\\n    iface[OpenNFTs] = OpenNFTsSig;\\n    bool[] memory supportInterface = nft.getSupportedInterfaces(iface);\\n\\n    if (supportInterface[ERC721]) {\\n      nftData.nft = nft;\\n\\n      if (supportInterface[ERC721Metadata]) {\\n        nftData.name = IERC721Metadata(nft).name();\\n        nftData.symbol = IERC721Metadata(nft).symbol();\\n      }\\n\\n      if (owner == address(0)) {\\n        if (supportInterface[ERC721Enumerable]) {\\n          nftData.balance = IERC721Enumerable(nft).totalSupply();\\n        }\\n      } else {\\n        nftData.balance = IERC721(nft).balanceOf(owner);\\n      }\\n\\n      if (supportInterface[OpenNFTs]) {\\n        nftData.owner = IOpenNFTs(nft).owner();\\n      }\\n    }\\n  }\\n\\n  function balancesOf(address owner) external view returns (NftData[] memory nftData) {\\n    nftData = new NftData[](implementations.length);\\n    for (uint256 i = 0; i < implementations.length; i += 1) {\\n      nftData[i] = balanceOf(implementations[i], owner);\\n    }\\n  }\\n\\n  function setCloneCost(uint256 _cloneCost) public onlyOwner {\\n    cloneCost = _cloneCost;\\n\\n    emit NewCloneCost(cloneCost);\\n  }\\n\\n  function clone(string memory _name, string memory _symbol)\\n    public\\n    payable\\n    returns (address clone_)\\n  {\\n    require(msg.value >= cloneCost && cloneCost > 0, \\\"Clone is payable\\\");\\n\\n    clone_ = _clone();\\n    require(clone_.supportsInterface(OpenNFTsSig), \\\"Clone is not Open NFTs contract\\\");\\n\\n    IOpenNFTs(clone_).initialize(_name, _symbol);\\n    IOpenNFTs(clone_).transferOwnership(msg.sender);\\n  }\\n\\n  function withdrawEther() external onlyOwner {\\n    (bool succeed, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n    require(succeed, \\\"Failed to withdraw Ether\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xe2ab8a41407f7ce1c8affe809acbf1d27308dfce9fbb1d1dffcf7d7809dd5802\",\"license\":\"MIT\"},\"solidity/contracts/interfaces/IContractProbe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IContractProbe {\\n  function probe(address _address) external view returns (bool isContract, address forwardedTo);\\n}\\n\",\"keccak256\":\"0x9dda006140d37bf757a3a36e50ea5552ce383b86133cd4b288ab23f500d32d86\",\"license\":\"MIT\"},\"solidity/contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOpenNFTs {\\n  function transferOwnership(address newOwner) external;\\n\\n  function initialize(string memory name_, string memory symbol_) external;\\n\\n  function mintNFT(address minter, string memory jsonURI) external returns (uint256);\\n\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2df20518e0b4346b754c8da1c88c563cc89652e2355da9523d11b0594851f4b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001d5138038062001d5183398101604081905262000034916200050a565b8062000040336200007f565b600480546001600160a01b0319166001600160a01b03929092169190911790556200006b83620000cf565b620000768262000151565b5050506200054a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200011e5760405162461bcd60e51b8152602060048201819052602482015260008051602062001d3183398151915260448201526064015b60405180910390fd5b600581905560405181907f4eed351187cc44c6711538dfedd75057d4e6ea7896b8703c89dec90e2e2bba5890600090a250565b6000546001600160a01b031633146200019c5760405162461bcd60e51b8152602060048201819052602482015260008051602062001d31833981519152604482015260640162000115565b6001600160a01b0381811660009081526003602052604090205416620001c757620001c78162000280565b6001600160a01b0380821660008181526003602052604090205490911614620002335760405162461bcd60e51b815260206004820152601360248201527f54656d706c617465206973206120436c6f6e6500000000000000000000000000604482015260640162000115565b600280546001600160a01b0319166001600160a01b0383169081179091556040513391907f81bbf04250a28f0d5979a401ffb6705dcebf8b354060431d672cf1ea4594fc6790600090a350565b6000546001600160a01b03163314620002cb5760405162461bcd60e51b8152602060048201819052602482015260008051602062001d31833981519152604482015260640162000115565b620002d681620002d9565b50565b6001600160a01b038181166000908152600360205260409020541615620003435760405162461bcd60e51b815260206004820152601d60248201527f496d706c656d656e746174696f6e20616c726561647920657869737473000000604482015260640162000115565b6004805460405163275e5da560e01b81526001600160a01b03848116938201939093526000928392169063275e5da590602401604080518083038186803b1580156200038e57600080fd5b505afa158015620003a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003c99190620004ce565b91509150816200041c5760405162461bcd60e51b815260206004820181905260248201527f496d706c656d656e746174696f6e206973206e6f74206120436f6e7472616374604482015260640162000115565b600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b038086166001600160a01b0319928316811790935560008381526003602052604080822080549387169390941683179093559151339391927f053585d4de2374a5e4cee65e665171098bd6777e89041c2915cdac4d567cd93f91a4505050565b80516001600160a01b0381168114620004c957600080fd5b919050565b60008060408385031215620004e1578182fd5b82518015158114620004f1578283fd5b91506200050160208401620004b1565b90509250929050565b6000806000606084860312156200051f578081fd5b835192506200053160208501620004b1565b91506200054160408501620004b1565b90509250925092565b6117d7806200055a6000396000f3fe6080604052600436106100e85760003560e01c806393199bcf1161008a578063c6e2a40011610059578063c6e2a40014610263578063e2a04dc614610283578063f2fde38b146102a3578063f7888aec146102c357600080fd5b806393199bcf146101f7578063adddce361461020a578063b98a47481461022e578063c17bae4f1461024e57600080fd5b8063715018a6116100c6578063715018a61461018d5780637362377b146101a4578063845affc8146101b95780638da5cb5b146101d957600080fd5b806320a99bd0146100ed5780636392a51f146101405780636f2ddd931461016d575b600080fd5b3480156100f957600080fd5b50610123610108366004611370565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014c57600080fd5b5061016061015b366004611370565b6102f0565b60405161013791906115d6565b34801561017957600080fd5b50600254610123906001600160a01b031681565b34801561019957600080fd5b506101a26103e7565b005b3480156101b057600080fd5b506101a2610426565b3480156101c557600080fd5b506101236101d43660046114f9565b6104eb565b3480156101e557600080fd5b506000546001600160a01b0316610123565b610123610205366004611498565b610515565b34801561021657600080fd5b5061022060055481565b604051908152602001610137565b34801561023a57600080fd5b506101a2610249366004611370565b610699565b34801561025a57600080fd5b50600154610220565b34801561026f57600080fd5b506101a261027e366004611370565b610798565b34801561028f57600080fd5b506101a261029e3660046114f9565b6107cb565b3480156102af57600080fd5b506101a26102be366004611370565b610828565b3480156102cf57600080fd5b506102e36102de3660046113a8565b6108c0565b6040516101379190611691565b60015460609067ffffffffffffffff81111561031c57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561035557816020015b6103426112ce565b81526020019060019003908161033a5790505b50905060005b6001548110156103e1576103a46001828154811061038957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316846108c0565b8282815181106103c457634e487b7160e01b600052603260045260246000fd5b60209081029190910101526103da6001826116fd565b905061035b565b50919050565b6000546001600160a01b0316331461041a5760405162461bcd60e51b81526004016104119061165c565b60405180910390fd5b6104246000610d6c565b565b6000546001600160a01b031633146104505760405162461bcd60e51b81526004016104119061165c565b604051600090339047908381818185875af1925050503d8060008114610492576040519150601f19603f3d011682016040523d82523d6000602084013e610497565b606091505b50509050806104e85760405162461bcd60e51b815260206004820152601860248201527f4661696c656420746f20776974686472617720457468657200000000000000006044820152606401610411565b50565b600181815481106104fb57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000600554341015801561052b57506000600554115b61056a5760405162461bcd60e51b815260206004820152601060248201526f436c6f6e652069732070617961626c6560801b6044820152606401610411565b610572610dbc565b905061058e6001600160a01b038216636ca50ed960e11b610e33565b6105da5760405162461bcd60e51b815260206004820152601f60248201527f436c6f6e65206973206e6f74204f70656e204e46547320636f6e7472616374006044820152606401610411565b60405163266c45bb60e11b81526001600160a01b03821690634cd88b76906106089086908690600401611637565b600060405180830381600087803b15801561062257600080fd5b505af1158015610636573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038416925063f2fde38b9150602401600060405180830381600087803b15801561067b57600080fd5b505af115801561068f573d6000803e3d6000fd5b5050505092915050565b6000546001600160a01b031633146106c35760405162461bcd60e51b81526004016104119061165c565b6001600160a01b03818116600090815260036020526040902054166106eb576106eb81610798565b6001600160a01b038082166000818152600360205260409020549091161461074b5760405162461bcd60e51b815260206004820152601360248201527254656d706c617465206973206120436c6f6e6560681b6044820152606401610411565b600280546001600160a01b0319166001600160a01b0383169081179091556040513391907f81bbf04250a28f0d5979a401ffb6705dcebf8b354060431d672cf1ea4594fc6790600090a350565b6000546001600160a01b031633146107c25760405162461bcd60e51b81526004016104119061165c565b6104e881610e58565b6000546001600160a01b031633146107f55760405162461bcd60e51b81526004016104119061165c565b600581905560405181907f4eed351187cc44c6711538dfedd75057d4e6ea7896b8703c89dec90e2e2bba5890600090a250565b6000546001600160a01b031633146108525760405162461bcd60e51b81526004016104119061165c565b6001600160a01b0381166108b75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610411565b6104e881610d6c565b6108c86112ce565b60408051600480825260a0820190925260009160208201608080368337505081519192506380ac58cd60e01b9183915060009061091557634e487b7160e01b600052603260045260246000fd5b6001600160e01b031990921660209283029190910190910152805163780e9d6360e01b908290600190811061095a57634e487b7160e01b600052603260045260246000fd5b6001600160e01b031990921660209283029190910190910152805163780e9d6360e01b908290600290811061099f57634e487b7160e01b600052603260045260246000fd5b6001600160e01b0319909216602092830291909101909101528051636ca50ed960e11b90829060039081106109e457634e487b7160e01b600052603260045260246000fd5b6001600160e01b0319909216602092830291909101909101526000610a126001600160a01b03861683611028565b905080600060ff1681518110610a3857634e487b7160e01b600052603260045260246000fd5b602002602001015115610d64576001600160a01b0385168352805181906001908110610a7457634e487b7160e01b600052603260045260246000fd5b602002602001015115610b7957846001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610aba57600080fd5b505afa158015610ace573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610af69190810190611425565b8360200181905250846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610b3757600080fd5b505afa158015610b4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b739190810190611425565b60408401525b6001600160a01b038416610c345780600260ff1681518110610bab57634e487b7160e01b600052603260045260246000fd5b602002602001015115610c2f57846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf157600080fd5b505afa158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190611511565b60608401525b610cb3565b6040516370a0823160e01b81526001600160a01b0385811660048301528616906370a082319060240160206040518083038186803b158015610c7557600080fd5b505afa158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad9190611511565b60608401525b80600360ff1681518110610cd757634e487b7160e01b600052603260045260246000fd5b602002602001015115610d6457846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1d57600080fd5b505afa158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d55919061138c565b6001600160a01b031660808401525b505092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002546000906001600160a01b0316610e105760405162461bcd60e51b815260206004820152601660248201527515195b5c1b185d1948191bd95cdb89dd08195e1a5cdd60521b6044820152606401610411565b600254610e25906001600160a01b0316611115565b9050610e3081610e58565b90565b6000610e3e836111b2565b8015610e4f5750610e4f83836111e5565b90505b92915050565b6001600160a01b038181166000908152600360205260409020541615610ec05760405162461bcd60e51b815260206004820152601d60248201527f496d706c656d656e746174696f6e20616c7265616479206578697374730000006044820152606401610411565b6004805460405163275e5da560e01b81526001600160a01b03848116938201939093526000928392169063275e5da590602401604080518083038186803b158015610f0a57600080fd5b505afa158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4291906113fa565b9150915081610f935760405162461bcd60e51b815260206004820181905260248201527f496d706c656d656e746174696f6e206973206e6f74206120436f6e74726163746044820152606401610411565b600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b038086166001600160a01b0319928316811790935560008381526003602052604080822080549387169390941683179093559151339391927f053585d4de2374a5e4cee65e665171098bd6777e89041c2915cdac4d567cd93f91a4505050565b60606000825167ffffffffffffffff81111561105457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561107d578160200160208202803683370190505b509050611089846111b2565b15610e4f5760005b835181101561110d576110cb858583815181106110be57634e487b7160e01b600052603260045260246000fd5b60200260200101516111e5565b8282815181106110eb57634e487b7160e01b600052603260045260246000fd5b911515602092830291909101909101528061110581611745565b915050611091565b509392505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166111ad5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610411565b919050565b60006111c5826301ffc9a760e01b6111e5565b8015610e5257506111de826001600160e01b03196111e5565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b038716906175309061124c9086906115ba565b6000604051808303818686fa925050503d8060008114611288576040519150601f19603f3d011682016040523d82523d6000602084013e61128d565b606091505b50915091506020815110156112a85760009350505050610e52565b8180156112c45750808060200190518101906112c491906113e0565b9695505050505050565b6040518060a0016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160006001600160a01b031681525090565b805180151581146111ad57600080fd5b600082601f83011261132f578081fd5b813561134261133d826116d5565b6116a4565b818152846020838601011115611356578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611381578081fd5b8135610e4f8161178c565b60006020828403121561139d578081fd5b8151610e4f8161178c565b600080604083850312156113ba578081fd5b82356113c58161178c565b915060208301356113d58161178c565b809150509250929050565b6000602082840312156113f1578081fd5b610e4f8261130f565b6000806040838503121561140c578182fd5b6114158361130f565b915060208301516113d58161178c565b600060208284031215611436578081fd5b815167ffffffffffffffff81111561144c578182fd5b8201601f8101841361145c578182fd5b805161146a61133d826116d5565b81815285602083850101111561147e578384fd5b61148f826020830160208601611715565b95945050505050565b600080604083850312156114aa578182fd5b823567ffffffffffffffff808211156114c1578384fd5b6114cd8683870161131f565b935060208501359150808211156114e2578283fd5b506114ef8582860161131f565b9150509250929050565b60006020828403121561150a578081fd5b5035919050565b600060208284031215611522578081fd5b5051919050565b60008151808452611541816020860160208601611715565b601f01601f19169290920160200192915050565b600060018060a01b03808351168452602083015160a0602086015261157d60a0860182611529565b9050604084015185820360408701526115968282611529565b91505060608401516060860152816080850151166080860152809250505092915050565b600082516115cc818460208701611715565b9190910192915050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561162a57603f19888603018452611618858351611555565b945092850192908501906001016115fc565b5092979650505050505050565b60408152600061164a6040830185611529565b828103602084015261148f8185611529565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602081526000610e4f6020830184611555565b604051601f8201601f1916810167ffffffffffffffff811182821017156116cd576116cd611776565b604052919050565b600067ffffffffffffffff8211156116ef576116ef611776565b50601f01601f191660200190565b6000821982111561171057611710611760565b500190565b60005b83811015611730578181015183820152602001611718565b8381111561173f576000848401525b50505050565b600060001982141561175957611759611760565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146104e857600080fdfea26469706673582212201868a974c088e09bc06ef50f4afd16af6051235a7cf3dde47cdd2586d4112d8b64736f6c634300080400334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2362,
        "contract": "solidity/contracts/NFTsFactory.sol:NFTsFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2959,
        "contract": "solidity/contracts/NFTsFactory.sol:NFTsFactory",
        "label": "implementations",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2961,
        "contract": "solidity/contracts/NFTsFactory.sol:NFTsFactory",
        "label": "template",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2965,
        "contract": "solidity/contracts/NFTsFactory.sol:NFTsFactory",
        "label": "templates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2967,
        "contract": "solidity/contracts/NFTsFactory.sol:NFTsFactory",
        "label": "contractProbe",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3148,
        "contract": "solidity/contracts/NFTsFactory.sol:NFTsFactory",
        "label": "cloneCost",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
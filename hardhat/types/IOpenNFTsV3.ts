/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IOpenNFTsV3Interface extends utils.Interface {
  contractName: "IOpenNFTsV3";
  functions: {
    "burnNFT(uint256)": FunctionFragment;
    "initialize(string,string,address,bool)": FunctionFragment;
    "mintNFT(address,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "burnNFT", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string, string, string, boolean]): string;
  encodeFunctionData(functionFragment: "mintNFT", values: [string, string]): string;

  decodeFunctionResult(functionFragment: "burnNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintNFT", data: BytesLike): Result;

  events: {};
}

export interface IOpenNFTsV3 extends BaseContract {
  contractName: "IOpenNFTsV3";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOpenNFTsV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnNFT(
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      name: string,
      symbol: string,
      owner: string,
      openMinting: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintNFT(
      minter: string,
      jsonURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnNFT(
    tokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    name: string,
    symbol: string,
    owner: string,
    openMinting: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintNFT(
    minter: string,
    jsonURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnNFT(tokenID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    initialize(
      name: string,
      symbol: string,
      owner: string,
      openMinting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    mintNFT(minter: string, jsonURI: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    burnNFT(tokenID: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    initialize(
      name: string,
      symbol: string,
      owner: string,
      openMinting: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintNFT(
      minter: string,
      jsonURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnNFT(
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      name: string,
      symbol: string,
      owner: string,
      openMinting: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintNFT(
      minter: string,
      jsonURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

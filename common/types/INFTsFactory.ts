/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace INFTsFactory {
  export type NftDataStruct = {
    nft: string;
    balanceOf: BigNumberish;
    owner: string;
    name: string;
    symbol: string;
    totalSupply: BigNumberish;
  };

  export type NftDataStructOutput = [
    string,
    BigNumber,
    string,
    string,
    string,
    BigNumber
  ] & {
    nft: string;
    balanceOf: BigNumber;
    owner: string;
    name: string;
    symbol: string;
    totalSupply: BigNumber;
  };
}

export interface INFTsFactoryInterface extends utils.Interface {
  contractName: "INFTsFactory";
  functions: {
    "balanceOf(address,address)": FunctionFragment;
    "balancesOf(address)": FunctionFragment;
    "clone(string,string)": FunctionFragment;
    "withdrawEther()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "balancesOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "clone",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balancesOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;

  events: {};
}

export interface INFTsFactory extends BaseContract {
  contractName: "INFTsFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INFTsFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      nft: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [INFTsFactory.NftDataStructOutput] & {
        nftData: INFTsFactory.NftDataStructOutput;
      }
    >;

    balancesOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [INFTsFactory.NftDataStructOutput[]] & {
        nftData: INFTsFactory.NftDataStructOutput[];
      }
    >;

    clone(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    nft: string,
    owner: string,
    overrides?: CallOverrides
  ): Promise<INFTsFactory.NftDataStructOutput>;

  balancesOf(
    owner: string,
    overrides?: CallOverrides
  ): Promise<INFTsFactory.NftDataStructOutput[]>;

  clone(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      nft: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<INFTsFactory.NftDataStructOutput>;

    balancesOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<INFTsFactory.NftDataStructOutput[]>;

    clone(
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawEther(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balanceOf(
      nft: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balancesOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    clone(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      nft: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balancesOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clone(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { ICloneFactory, ICloneFactoryInterface } from "../ICloneFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "addImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "implementations",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementationsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "probe",
        type: "address",
      },
    ],
    name: "setContractProbe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "template",
        type: "address",
      },
    ],
    name: "setDefaultTemplate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class ICloneFactory__factory {
  static readonly abi = _abi;
  static createInterface(): ICloneFactoryInterface {
    return new utils.Interface(_abi) as ICloneFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICloneFactory {
    return new Contract(address, _abi, signerOrProvider) as ICloneFactory;
  }
}

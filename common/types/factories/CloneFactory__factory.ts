/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CloneFactory, CloneFactoryInterface } from "../CloneFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "template",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "NewImplementation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "template",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "NewTemplate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "addImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "contractProbe",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "implementations",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementationsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setContractProbe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setDefaultTemplate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "template",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "templates",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6110428061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a25e0d7011610071578063a25e0d7014610154578063b98a474814610170578063bcde32a11461018c578063c17bae4f146101aa578063c6e2a400146101c8578063f2fde38b146101e4576100a9565b806320a99bd0146100ae5780636f2ddd93146100de578063715018a6146100fc578063845affc8146101065780638da5cb5b14610136575b600080fd5b6100c860048036038101906100c39190610c19565b610200565b6040516100d59190610c55565b60405180910390f35b6100e6610233565b6040516100f39190610c55565b60405180910390f35b610104610259565b005b610120600480360381019061011b9190610ca6565b6102e1565b60405161012d9190610c55565b60405180910390f35b61013e610320565b60405161014b9190610c55565b60405180910390f35b61016e60048036038101906101699190610c19565b610349565b005b61018a60048036038101906101859190610c19565b610409565b005b6101946105b9565b6040516101a19190610c55565b60405180910390f35b6101b26105df565b6040516101bf9190610ce2565b60405180910390f35b6101e260048036038101906101dd9190610c19565b6105ec565b005b6101fe60048036038101906101f99190610c19565b6106c8565b005b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102616107c0565b73ffffffffffffffffffffffffffffffffffffffff1661027f610320565b73ffffffffffffffffffffffffffffffffffffffff16146102d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cc90610d5a565b60405180910390fd5b6102df60006107c8565b565b600381815481106102f157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103516107c0565b73ffffffffffffffffffffffffffffffffffffffff1661036f610320565b73ffffffffffffffffffffffffffffffffffffffff16146103c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bc90610d5a565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6104116107c0565b73ffffffffffffffffffffffffffffffffffffffff1661042f610320565b73ffffffffffffffffffffffffffffffffffffffff1614610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90610d5a565b60405180910390fd5b6000806104918361088c565b915091508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fa90610dc6565b60405180910390fd5b8161051257610511836105ec565b5b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061055b6107c0565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f81bbf04250a28f0d5979a401ffb6705dcebf8b354060431d672cf1ea4594fc6760405160405180910390a3505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600380549050905090565b6105f46107c0565b73ffffffffffffffffffffffffffffffffffffffff16610612610320565b73ffffffffffffffffffffffffffffffffffffffff1614610668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065f90610d5a565b60405180910390fd5b6000806106748361088c565b9150915081156106b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b090610e32565b60405180910390fd5b6106c38382610a59565b505050565b6106d06107c0565b73ffffffffffffffffffffffffffffffffffffffff166106ee610320565b73ffffffffffffffffffffffffffffffffffffffff1614610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073b90610d5a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ab90610ec4565b60405180910390fd5b6107bd816107c8565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663275e5da5856040518263ffffffff1660e01b81526004016108ec9190610c55565b604080518083038186803b15801561090357600080fd5b505afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190610f31565b809350819250505080610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097a90610fbd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109c1576109c0610fdd565b5b600073ffffffffffffffffffffffffffffffffffffffff16600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415925050915091565b6003829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b426107c0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f053585d4de2374a5e4cee65e665171098bd6777e89041c2915cdac4d567cd93f60405160405180910390a45050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610be682610bbb565b9050919050565b610bf681610bdb565b8114610c0157600080fd5b50565b600081359050610c1381610bed565b92915050565b600060208284031215610c2f57610c2e610bb6565b5b6000610c3d84828501610c04565b91505092915050565b610c4f81610bdb565b82525050565b6000602082019050610c6a6000830184610c46565b92915050565b6000819050919050565b610c8381610c70565b8114610c8e57600080fd5b50565b600081359050610ca081610c7a565b92915050565b600060208284031215610cbc57610cbb610bb6565b5b6000610cca84828501610c91565b91505092915050565b610cdc81610c70565b82525050565b6000602082019050610cf76000830184610cd3565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610d44602083610cfd565b9150610d4f82610d0e565b602082019050919050565b60006020820190508181036000830152610d7381610d37565b9050919050565b7f54656d706c617465206973206120436c6f6e6500000000000000000000000000600082015250565b6000610db0601383610cfd565b9150610dbb82610d7a565b602082019050919050565b60006020820190508181036000830152610ddf81610da3565b9050919050565b7f496d706c656d656e746174696f6e20616c726561647920657869737473000000600082015250565b6000610e1c601d83610cfd565b9150610e2782610de6565b602082019050919050565b60006020820190508181036000830152610e4b81610e0f565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610eae602683610cfd565b9150610eb982610e52565b604082019050919050565b60006020820190508181036000830152610edd81610ea1565b9050919050565b60008115159050919050565b610ef981610ee4565b8114610f0457600080fd5b50565b600081519050610f1681610ef0565b92915050565b600081519050610f2b81610bed565b92915050565b60008060408385031215610f4857610f47610bb6565b5b6000610f5685828601610f07565b9250506020610f6785828601610f1c565b9150509250929050565b7f4e6f74206120436f6e7472616374000000000000000000000000000000000000600082015250565b6000610fa7600e83610cfd565b9150610fb282610f71565b602082019050919050565b60006020820190508181036000830152610fd681610f9a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea2646970667358221220db8cdf297e65a8a3d3fc35fd578b366959fe350cf92297ab48f3de64b0290ef564736f6c63430008090033";

type CloneFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CloneFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CloneFactory__factory extends ContractFactory {
  constructor(...args: CloneFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CloneFactory";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CloneFactory> {
    return super.deploy(overrides || {}) as Promise<CloneFactory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CloneFactory {
    return super.attach(address) as CloneFactory;
  }
  connect(signer: Signer): CloneFactory__factory {
    return super.connect(signer) as CloneFactory__factory;
  }
  static readonly contractName: "CloneFactory";
  public readonly contractName: "CloneFactory";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CloneFactoryInterface {
    return new utils.Interface(_abi) as CloneFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CloneFactory {
    return new Contract(address, _abi, signerOrProvider) as CloneFactory;
  }
}

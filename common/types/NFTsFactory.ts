/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace INFTsFactory {
  export type NftDataStruct = {
    nft: string;
    balanceOf: BigNumberish;
    owner: string;
    name: string;
    symbol: string;
    totalSupply: BigNumberish;
  };

  export type NftDataStructOutput = [
    string,
    BigNumber,
    string,
    string,
    string,
    BigNumber
  ] & {
    nft: string;
    balanceOf: BigNumber;
    owner: string;
    name: string;
    symbol: string;
    totalSupply: BigNumber;
  };
}

export interface NFTsFactoryInterface extends utils.Interface {
  contractName: "NFTsFactory";
  functions: {
    "ERC721()": FunctionFragment;
    "ERC721_ENUMERABLE()": FunctionFragment;
    "ERC721_ENUMERABLE_SIG()": FunctionFragment;
    "ERC721_METADATA()": FunctionFragment;
    "ERC721_METADATA_SIG()": FunctionFragment;
    "ERC721_SIG()": FunctionFragment;
    "OPEN_NFTS()": FunctionFragment;
    "OPEN_NFTS_SIG()": FunctionFragment;
    "addImplementation(address)": FunctionFragment;
    "balanceOf(address,address)": FunctionFragment;
    "balancesOf(address)": FunctionFragment;
    "clone(string,string)": FunctionFragment;
    "contractProbe()": FunctionFragment;
    "implementations(uint256)": FunctionFragment;
    "implementationsCount()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setContractProbe(address)": FunctionFragment;
    "setDefaultTemplate(address)": FunctionFragment;
    "template()": FunctionFragment;
    "templates(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawEther()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ERC721", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ERC721_ENUMERABLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_ENUMERABLE_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_METADATA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_METADATA_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OPEN_NFTS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OPEN_NFTS_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "balancesOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "clone",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractProbe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "implementationsCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setContractProbe",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultTemplate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "template", values?: undefined): string;
  encodeFunctionData(functionFragment: "templates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ERC721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_ENUMERABLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_ENUMERABLE_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_METADATA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_METADATA_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ERC721_SIG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OPEN_NFTS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OPEN_NFTS_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balancesOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractProbe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementationsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractProbe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "template", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "templates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;

  events: {
    "NewImplementation(address,address,address)": EventFragment;
    "NewTemplate(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewImplementation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTemplate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type NewImplementationEvent = TypedEvent<
  [string, string, string],
  { implementation: string; template: string; creator: string }
>;

export type NewImplementationEventFilter =
  TypedEventFilter<NewImplementationEvent>;

export type NewTemplateEvent = TypedEvent<
  [string, string],
  { template: string; creator: string }
>;

export type NewTemplateEventFilter = TypedEventFilter<NewTemplateEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface NFTsFactory extends BaseContract {
  contractName: "NFTsFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTsFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC721(overrides?: CallOverrides): Promise<[number]>;

    ERC721_ENUMERABLE(overrides?: CallOverrides): Promise<[number]>;

    ERC721_ENUMERABLE_SIG(overrides?: CallOverrides): Promise<[string]>;

    ERC721_METADATA(overrides?: CallOverrides): Promise<[number]>;

    ERC721_METADATA_SIG(overrides?: CallOverrides): Promise<[string]>;

    ERC721_SIG(overrides?: CallOverrides): Promise<[string]>;

    OPEN_NFTS(overrides?: CallOverrides): Promise<[number]>;

    OPEN_NFTS_SIG(overrides?: CallOverrides): Promise<[string]>;

    addImplementation(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      nft: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [INFTsFactory.NftDataStructOutput] & {
        nftData: INFTsFactory.NftDataStructOutput;
      }
    >;

    balancesOf(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [INFTsFactory.NftDataStructOutput[]] & {
        nftData: INFTsFactory.NftDataStructOutput[];
      }
    >;

    clone(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractProbe(overrides?: CallOverrides): Promise<[string]>;

    implementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    implementationsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractProbe(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultTemplate(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    template(overrides?: CallOverrides): Promise<[string]>;

    templates(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ERC721(overrides?: CallOverrides): Promise<number>;

  ERC721_ENUMERABLE(overrides?: CallOverrides): Promise<number>;

  ERC721_ENUMERABLE_SIG(overrides?: CallOverrides): Promise<string>;

  ERC721_METADATA(overrides?: CallOverrides): Promise<number>;

  ERC721_METADATA_SIG(overrides?: CallOverrides): Promise<string>;

  ERC721_SIG(overrides?: CallOverrides): Promise<string>;

  OPEN_NFTS(overrides?: CallOverrides): Promise<number>;

  OPEN_NFTS_SIG(overrides?: CallOverrides): Promise<string>;

  addImplementation(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    nft: string,
    owner: string,
    overrides?: CallOverrides
  ): Promise<INFTsFactory.NftDataStructOutput>;

  balancesOf(
    addr: string,
    overrides?: CallOverrides
  ): Promise<INFTsFactory.NftDataStructOutput[]>;

  clone(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractProbe(overrides?: CallOverrides): Promise<string>;

  implementations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  implementationsCount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractProbe(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultTemplate(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  template(overrides?: CallOverrides): Promise<string>;

  templates(arg0: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ERC721(overrides?: CallOverrides): Promise<number>;

    ERC721_ENUMERABLE(overrides?: CallOverrides): Promise<number>;

    ERC721_ENUMERABLE_SIG(overrides?: CallOverrides): Promise<string>;

    ERC721_METADATA(overrides?: CallOverrides): Promise<number>;

    ERC721_METADATA_SIG(overrides?: CallOverrides): Promise<string>;

    ERC721_SIG(overrides?: CallOverrides): Promise<string>;

    OPEN_NFTS(overrides?: CallOverrides): Promise<number>;

    OPEN_NFTS_SIG(overrides?: CallOverrides): Promise<string>;

    addImplementation(addr: string, overrides?: CallOverrides): Promise<void>;

    balanceOf(
      nft: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<INFTsFactory.NftDataStructOutput>;

    balancesOf(
      addr: string,
      overrides?: CallOverrides
    ): Promise<INFTsFactory.NftDataStructOutput[]>;

    clone(
      name_: string,
      symbol_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    contractProbe(overrides?: CallOverrides): Promise<string>;

    implementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    implementationsCount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setContractProbe(addr: string, overrides?: CallOverrides): Promise<void>;

    setDefaultTemplate(addr: string, overrides?: CallOverrides): Promise<void>;

    template(overrides?: CallOverrides): Promise<string>;

    templates(arg0: string, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEther(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewImplementation(address,address,address)"(
      implementation?: string | null,
      template?: string | null,
      creator?: string | null
    ): NewImplementationEventFilter;
    NewImplementation(
      implementation?: string | null,
      template?: string | null,
      creator?: string | null
    ): NewImplementationEventFilter;

    "NewTemplate(address,address)"(
      template?: string | null,
      creator?: string | null
    ): NewTemplateEventFilter;
    NewTemplate(
      template?: string | null,
      creator?: string | null
    ): NewTemplateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ERC721(overrides?: CallOverrides): Promise<BigNumber>;

    ERC721_ENUMERABLE(overrides?: CallOverrides): Promise<BigNumber>;

    ERC721_ENUMERABLE_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    ERC721_METADATA(overrides?: CallOverrides): Promise<BigNumber>;

    ERC721_METADATA_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    ERC721_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    OPEN_NFTS(overrides?: CallOverrides): Promise<BigNumber>;

    OPEN_NFTS_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    addImplementation(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      nft: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balancesOf(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    clone(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractProbe(overrides?: CallOverrides): Promise<BigNumber>;

    implementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementationsCount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractProbe(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultTemplate(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    template(overrides?: CallOverrides): Promise<BigNumber>;

    templates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERC721_ENUMERABLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERC721_ENUMERABLE_SIG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC721_METADATA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERC721_METADATA_SIG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC721_SIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPEN_NFTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPEN_NFTS_SIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addImplementation(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      nft: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balancesOf(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clone(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractProbe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementationsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractProbe(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultTemplate(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    template(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    templates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

{
  "address": "0xA6f680a9f1faDBdb03FDDbab2107344e29830bFc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "ImplementationNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        }
      ],
      "name": "TemplateNew",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balancesOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct INFTsFactoryV2.NftData[]",
          "name": "nftData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "clone_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "implementations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "implementationsToAdd",
          "type": "address[]"
        }
      ],
      "name": "implementationsAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementationsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "templateSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "templates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ccd5a821e83b3ff1b2da7b78422714a5151fc0ef2bfdea8235b5510b944d308",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": null,
    "transactionIndex": 8,
    "gasUsed": "2243898",
    "logsBloom": "0x
    "blockHash": "0x371781ec786dbd43b70c347b155a1dfee1046303098a587c7aa38de357e2cbd5",
    "transactionHash": "0x1ccd5a821e83b3ff1b2da7b78422714a5151fc0ef2bfdea8235b5510b944d308",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 25194995,
        "transactionHash": "0x1ccd5a821e83b3ff1b2da7b78422714a5151fc0ef2bfdea8235b5510b944d308",
        "address": "0xA6f680a9f1faDBdb03FDDbab2107344e29830bFc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0x371781ec786dbd43b70c347b155a1dfee1046303098a587c7aa38de357e2cbd5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 25194995,
        "transactionHash": "0x1ccd5a821e83b3ff1b2da7b78422714a5151fc0ef2bfdea8235b5510b944d308",
        "address": "0xA6f680a9f1faDBdb03FDDbab2107344e29830bFc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0x371781ec786dbd43b70c347b155a1dfee1046303098a587c7aa38de357e2cbd5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 25194995,
        "transactionHash": "0x1ccd5a821e83b3ff1b2da7b78422714a5151fc0ef2bfdea8235b5510b944d308",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000bf53853569ae80000000000000000000000000000000000000000000000000b4a14843c6ff01b00000000000000000000000000000000000000000000076fd1b50653c862fac30000000000000000000000000000000000000000000000000b3e1f4be919553300000000000000000000000000000000000000000000076fd1c0fb8c1bb995ab",
        "logIndex": 30,
        "blockHash": "0x371781ec786dbd43b70c347b155a1dfee1046303098a587c7aa38de357e2cbd5"
      }
    ],
    "blockNumber": 25194995,
    "cumulativeGasUsed": "4075888",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c"
  ],
  "numDeployments": 1,
  "solcInputHash": "98ec254a37df7be518ae7bf6722df613",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"ImplementationNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"}],\"name\":\"TemplateNew\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balancesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTsFactoryV2.NftData[]\",\"name\":\"nftData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"clone_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"implementationsToAdd\",\"type\":\"address[]\"}],\"name\":\"implementationsAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"templateSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"templates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"is CloneFactory\",\"kind\":\"dev\",\"methods\":{\"balancesOf(address)\":{\"params\":{\"addr\":\"address of account\"},\"returns\":{\"nftData\":\"Array of nftData balances\"}},\"clone(string,string,string)\":{\"params\":{\"name\":\"name of Clone collection\",\"symbol\":\"symbol of Clone collection\"},\"returns\":{\"clone_\":\"Address of Clone collection\"}},\"implementationsAdd(address[])\":{\"params\":{\"implementationsToAdd\":\": new implementations addresses\"}},\"implementationsCount()\":{\"returns\":{\"_0\":\"count : number of implementations\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"NFTsFactory smartcontract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balancesOf(address)\":{\"notice\":\"balancesOf address\"},\"clone(string,string,string)\":{\"notice\":\"clone template\"},\"implementations(uint256)\":{\"notice\":\"Implementations addresses\"},\"implementationsAdd(address[])\":{\"notice\":\"ADD Implementations public onlyOwner\"},\"implementationsCount()\":{\"notice\":\"Implementations count\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/new/NFTsFactoryV2.sol\":\"NFTsFactoryV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/deployed/interfaces/IOpenNFTsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV2 {\\n    function transferOwnership(address newOwner) external;\\n\\n    function initialize(string memory name, string memory symbol) external;\\n\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function owner() external view returns (address owner);\\n}\\n\",\"keccak256\":\"0x0ca6b580e50044c8103a61a0d394c149550f03517c9600dce97ab8c73748790c\",\"license\":\"MIT\"},\"contracts/new/CloneFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/ICloneFactoryV2.sol\\\";\\n\\n/// @title Clone Factory\\n/// @notice Generic Clone Factory to create multiple Clones from Templates\\n/// @dev CloneFactory is ICloneFactory and Ownable\\ncontract CloneFactoryV2 is ICloneFactoryV2, Ownable {\\n    /// @notice Implementations addresses\\n    address[] public implementations;\\n\\n    /// @notice Implementations count\\n    /// @return count : number of implementations\\n    function implementationsCount() public view override(ICloneFactoryV2) returns (uint256) {\\n        return implementations.length;\\n    }\\n\\n    /// @notice ADD Implementations public onlyOwner\\n    /// @param  implementationsToAdd : new implementations addresses\\n    function implementationsAdd(address[] calldata implementationsToAdd) external override(ICloneFactoryV2) onlyOwner {\\n        for (uint256 i = 0; i < implementationsToAdd.length; i += 1) {\\n            _implementationAdd(implementationsToAdd[i]);\\n        }\\n    }\\n\\n    /// @notice ADD Implementation internal\\n    /// @param  implementationToAdd : implementation address\\n    function _implementationAdd(address implementationToAdd) internal virtual {\\n        _implementationNew(implementationToAdd);\\n    }\\n\\n    /// @notice Clone Template\\n    /// @param  template : template address\\n    /// @return addr : clone address\\n    function _clone(address template) internal returns (address addr) {\\n        /// @notice clone template and get clone address\\n        addr = Clones.clone(template);\\n\\n        /// @notice register clone as new implementation\\n        _implementationNew(addr);\\n    }\\n\\n    /// @notice NEW Implementation internal\\n    /// @param  implementation : implementation address\\n    function _implementationNew(address implementation) internal {\\n        /// @notice register implementation\\n        implementations.push(implementation);\\n\\n        /// @notice emit event ImplementationNew\\n        emit ImplementationNew(implementation, _msgSender(), implementationsCount());\\n    }\\n}\\n\",\"keccak256\":\"0x4bf59dcdc0a0ff3861802ac68ca700a83fe2412b24d2d4bcf55ca8b9e8153847\",\"license\":\"MIT\"},\"contracts/new/NFTsFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./CloneFactoryV2.sol\\\";\\nimport \\\"./interfaces/INFTsFactoryV2.sol\\\";\\nimport \\\"./interfaces/IOpenNFTsV3.sol\\\";\\nimport \\\"../deployed/interfaces/IOpenNFTsV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/// @title NFTsFactory smartcontract\\n/// @dev is CloneFactory\\ncontract NFTsFactoryV2 is CloneFactoryV2, INFTsFactoryV2 {\\n    using ERC165Checker for address;\\n\\n    mapping(string => address) public templates;\\n\\n    uint8 public constant version = 2;\\n\\n    uint8 internal constant ERC721 = 0;\\n    uint8 internal constant ERC721_METADATA = 1;\\n    uint8 internal constant ERC721_ENUMERABLE = 2;\\n    uint8 internal constant OPEN_NFTS_V2 = 3;\\n    uint8 internal constant OPEN_NFTS_V3 = 4;\\n\\n    bytes4 internal constant ERC721_SIG = bytes4(0x80ac58cd);\\n    bytes4 internal constant ERC721_METADATA_SIG = bytes4(0x780e9d63);\\n    bytes4 internal constant ERC721_ENUMERABLE_SIG = bytes4(0x780e9d63);\\n    bytes4 internal constant OPEN_NFTS_V2_SIG = type(IOpenNFTsV2).interfaceId;\\n    bytes4 internal constant OPEN_NFTS_V3_SIG = type(IOpenNFTsV3).interfaceId;\\n\\n    constructor(address initialOwner) {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /// @notice balancesOf address\\n    /// @param addr  address of account\\n    /// @return nftData Array of nftData balances\\n    function balancesOf(address addr) external view override(INFTsFactoryV2) returns (NftData[] memory nftData) {\\n        nftData = new NftData[](implementations.length);\\n        for (uint256 i = 0; i < implementations.length; i += 1) {\\n            nftData[i] = balanceOf(implementations[i], addr);\\n        }\\n    }\\n\\n    function templateSet(string calldata templateName, address template) external onlyOwner {\\n        require(template.supportsInterface(ERC721_SIG), \\\"Template not ERC721 contract\\\");\\n        templates[templateName] = template;\\n\\n        emit TemplateNew(template, templateName);\\n    }\\n\\n    /// @notice clone template\\n    /// @param name name of Clone collection\\n    /// @param symbol symbol of Clone collection\\n    /// @return clone_ Address of Clone collection\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName\\n    ) external override(INFTsFactoryV2) returns (address clone_) {\\n        address template = templates[templateName];\\n        require(template != address(0), \\\"Bad Template\\\");\\n        require(\\n            template.supportsInterface(OPEN_NFTS_V2_SIG) || template.supportsInterface(OPEN_NFTS_V3_SIG),\\n            \\\"Template not OpenNFTs V2 or V3 contract\\\"\\n        );\\n        clone_ = _clone(templates[templateName]);\\n\\n        if (template.supportsInterface(OPEN_NFTS_V2_SIG)) {\\n            IOpenNFTsV2(clone_).initialize(name, symbol);\\n        } else {\\n            IOpenNFTsV3(clone_).initialize(name, symbol, _msgSender(), false);\\n        }\\n    }\\n\\n    /// @notice ADD Implementation internal\\n    /// @param  implementationToAdd : implementation address\\n    function _implementationAdd(address implementationToAdd) internal override(CloneFactoryV2) {\\n        require(implementationToAdd.supportsInterface(ERC721_SIG), \\\"Implementation not ERC721 contract\\\");\\n        super._implementationNew(implementationToAdd);\\n    }\\n\\n    /// @notice balanceOf\\n    /// @param nft nft address of NFT collection\\n    /// @param owner address of account\\n    /// @return nftData nftData balances\\n    function balanceOf(address nft, address owner) internal view returns (NftData memory nftData) {\\n        bytes4[] memory iface = new bytes4[](5);\\n        iface[ERC721] = ERC721_SIG;\\n        iface[ERC721_METADATA] = ERC721_METADATA_SIG;\\n        iface[ERC721_ENUMERABLE] = ERC721_ENUMERABLE_SIG;\\n        iface[OPEN_NFTS_V2] = OPEN_NFTS_V2_SIG;\\n        iface[OPEN_NFTS_V3] = OPEN_NFTS_V3_SIG;\\n        bool[] memory supportInterface = nft.getSupportedInterfaces(iface);\\n\\n        if (supportInterface[ERC721]) {\\n            nftData.nft = nft;\\n            nftData.balanceOf = IERC721(nft).balanceOf(owner);\\n\\n            if (supportInterface[ERC721_METADATA]) {\\n                nftData.name = IERC721Metadata(nft).name();\\n                nftData.symbol = IERC721Metadata(nft).symbol();\\n            }\\n\\n            if (supportInterface[ERC721_ENUMERABLE]) {\\n                nftData.totalSupply = IERC721Enumerable(nft).totalSupply();\\n            }\\n\\n            if (supportInterface[OPEN_NFTS_V2] || supportInterface[OPEN_NFTS_V3]) {\\n                nftData.owner = OwnableUpgradeable(nft).owner();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdfcc398065913e64a8f58df85f548e1cc4492b1c2ca737770f6a0afbde082d15\",\"license\":\"MIT\"},\"contracts/new/interfaces/ICloneFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface ICloneFactoryV2 {\\n    event ImplementationNew(address indexed implementation, address indexed creator, uint256 count);\\n\\n    function implementationsCount() external view returns (uint256);\\n\\n    function implementations(uint256 index) external view returns (address);\\n\\n    function implementationsAdd(address[] calldata implementationToAdd) external;\\n}\\n\",\"keccak256\":\"0x1db23c7f50f7c2b5ea9d95983359b177f0b62cdb2a36addf1762d97af3d7d80a\",\"license\":\"MIT\"},\"contracts/new/interfaces/INFTsFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface INFTsFactoryV2 {\\n    struct NftData {\\n        address nft;\\n        uint256 balanceOf;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n    }\\n\\n    event TemplateNew(address indexed template, string indexed templateName);\\n\\n    function version() external view returns (uint8);\\n\\n    function balancesOf(address owner) external view returns (NftData[] memory);\\n\\n    function templateSet(string calldata templateName, address template) external;\\n\\n    function templates(string calldata) external view returns (address);\\n\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x32606c3ee03aa982c2589af1e97afc2a9190d4f81c175963fbb24654e94f2f08\",\"license\":\"MIT\"},\"contracts/new/interfaces/IOpenNFTsV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTsV3 {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool openMinting\\n    ) external;\\n\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x751a09d9eb60f1b6b2d17927da15b053404d7ac6ca7b779f7da2184bea83a92c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620028ff380380620028ff8339818101604052810190620000379190620001a5565b620000576200004b6200006f60201b60201c565b6200007760201b60201c565b62000068816200007760201b60201c565b50620001d7565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016d8262000140565b9050919050565b6200017f8162000160565b81146200018b57600080fd5b50565b6000815190506200019f8162000174565b92915050565b600060208284031215620001be57620001bd6200013b565b5b6000620001ce848285016200018e565b91505092915050565b61271880620001e76000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b14610152578063b22beeda14610170578063ba6da050146101a0578063c17bae4f146101bc578063ddf0fc8f146101da578063f2fde38b1461020a576100a9565b806354fd4d50146100ae5780636392a51f146100cc578063715018a6146100fc57806382a1db3914610106578063845affc814610122575b600080fd5b6100b6610226565b6040516100c39190611791565b60405180910390f35b6100e660048036038101906100e1919061181e565b61022b565b6040516100f39190611a5e565b60405180910390f35b610104610318565b005b610120600480360381019061011b9190611ae5565b6103a0565b005b61013c60048036038101906101379190611b5e565b610473565b6040516101499190611b9a565b60405180910390f35b61015a6104b2565b6040516101679190611b9a565b60405180910390f35b61018a60048036038101906101859190611ce5565b6104db565b6040516101979190611b9a565b60405180910390f35b6101ba60048036038101906101b59190611d84565b610524565b005b6101c46106ce565b6040516101d19190611df3565b60405180910390f35b6101f460048036038101906101ef9190611e0e565b6106db565b6040516102019190611b9a565b60405180910390f35b610224600480360381019061021f919061181e565b6109f2565b005b600281565b606060018054905067ffffffffffffffff81111561024c5761024b611bba565b5b60405190808252806020026020018201604052801561028557816020015b610272611713565b81526020019060019003908161026a5790505b50905060005b600180549050811015610312576102e0600182815481106102af576102ae611eb5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610aea565b8282815181106102f3576102f2611eb5565b5b602002602001018190525060018161030b9190611f13565b905061028b565b50919050565b610320611194565b73ffffffffffffffffffffffffffffffffffffffff1661033e6104b2565b73ffffffffffffffffffffffffffffffffffffffff1614610394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038b90611fc6565b60405180910390fd5b61039e600061119c565b565b6103a8611194565b73ffffffffffffffffffffffffffffffffffffffff166103c66104b2565b73ffffffffffffffffffffffffffffffffffffffff161461041c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611fc6565b60405180910390fd5b60005b8282905081101561046e5761045a8383838181106104405761043f611eb5565b5b9050602002016020810190610455919061181e565b611260565b6001816104679190611f13565b905061041f565b505050565b6001818154811061048357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6002818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61052c611194565b73ffffffffffffffffffffffffffffffffffffffff1661054a6104b2565b73ffffffffffffffffffffffffffffffffffffffff16146105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059790611fc6565b60405180910390fd5b6105d06380ac58cd60e01b8273ffffffffffffffffffffffffffffffffffffffff166112db90919063ffffffff16565b61060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060690612032565b60405180910390fd5b8060028484604051610622929190612082565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828260405161067e929190612082565b60405180910390208173ffffffffffffffffffffffffffffffffffffffff167f7ef32a1c1ccb487fb9a5968c44a00b054a71860d72da8bec23ac75cfe646671260405160405180910390a3505050565b6000600180549050905090565b6000806002836040516106ee91906120cc565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561078f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107869061212f565b60405180910390fd5b6107d87fd94a1db2000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff166112db90919063ffffffff16565b8061082857506108277f9e4ad480000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff166112db90919063ffffffff16565b5b610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085e906121c1565b60405180910390fd5b6108ae60028460405161087a91906120cc565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611300565b91506108f97fd94a1db2000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff166112db90919063ffffffff16565b15610970578173ffffffffffffffffffffffffffffffffffffffff16634cd88b7686866040518363ffffffff1660e01b815260040161093992919061221a565b600060405180830381600087803b15801561095357600080fd5b505af1158015610967573d6000803e3d6000fd5b505050506109ea565b8173ffffffffffffffffffffffffffffffffffffffff16635c108a438686610996611194565b60006040518563ffffffff1660e01b81526004016109b7949392919061226c565b600060405180830381600087803b1580156109d157600080fd5b505af11580156109e5573d6000803e3d6000fd5b505050505b509392505050565b6109fa611194565b73ffffffffffffffffffffffffffffffffffffffff16610a186104b2565b73ffffffffffffffffffffffffffffffffffffffff1614610a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6590611fc6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590612331565b60405180910390fd5b610ae78161119c565b50565b610af2611713565b6000600567ffffffffffffffff811115610b0f57610b0e611bba565b5b604051908082528060200260200182016040528015610b3d5781602001602082028036833780820191505090505b5090506380ac58cd60e01b81600060ff1681518110610b5f57610b5e611eb5565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505063780e9d6360e01b81600160ff1681518110610bca57610bc9611eb5565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505063780e9d6360e01b81600260ff1681518110610c3557610c34611eb5565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250507fd94a1db20000000000000000000000000000000000000000000000000000000081600360ff1681518110610cb957610cb8611eb5565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250507f9e4ad4800000000000000000000000000000000000000000000000000000000081600460ff1681518110610d3d57610d3c611eb5565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250506000610db4828673ffffffffffffffffffffffffffffffffffffffff1661131b90919063ffffffff16565b905080600060ff1681518110610dcd57610dcc611eb5565b5b60200260200101511561118c5784836000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401610e4b9190611b9a565b60206040518083038186803b158015610e6357600080fd5b505afa158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190612366565b83602001818152505080600160ff1681518110610ebb57610eba611eb5565b5b602002602001015115610fdf578473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610f0e57600080fd5b505afa158015610f22573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f4b9190612403565b83606001819052508473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610f9957600080fd5b505afa158015610fad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610fd69190612403565b83608001819052505b80600260ff1681518110610ff657610ff5611eb5565b5b60200260200101511561108b578473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561104957600080fd5b505afa15801561105d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110819190612366565b8360a00181815250505b80600360ff16815181106110a2576110a1611eb5565b5b6020026020010151806110d0575080600460ff16815181106110c7576110c6611eb5565b5b60200260200101515b1561118b578473ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111b57600080fd5b505afa15801561112f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111539190612461565b836040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b5b505092915050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6112906380ac58cd60e01b8273ffffffffffffffffffffffffffffffffffffffff166112db90919063ffffffff16565b6112cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c690612500565b60405180910390fd5b6112d8816113ed565b50565b60006112e6836114c6565b80156112f857506112f78383611513565b5b905092915050565b600061130b8261163e565b9050611316816113ed565b919050565b60606000825167ffffffffffffffff81111561133a57611339611bba565b5b6040519080825280602002602001820160405280156113685781602001602082028036833780820191505090505b509050611374846114c6565b156113e35760005b83518110156113e1576113a98585838151811061139c5761139b611eb5565b5b6020026020010151611513565b8282815181106113bc576113bb611eb5565b5b60200260200101901515908115158152505080806113d990612520565b91505061137c565b505b8091505092915050565b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611458611194565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fe1fd48e37080a338bebd722213e17521b8a454ab4f0ef1b1a487025d5191e7a16114ae6106ce565b6040516114bb9190611df3565b60405180910390a350565b60006114f2827f01ffc9a700000000000000000000000000000000000000000000000000000000611513565b801561150c575061150a8263ffffffff60e01b611513565b155b9050919050565b6000806301ffc9a760e01b8360405160240161152f91906125a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000808573ffffffffffffffffffffffffffffffffffffffff16617530846040516115b99190612606565b6000604051808303818686fa925050503d80600081146115f5576040519150601f19603f3d011682016040523d82523d6000602084013e6115fa565b606091505b50915091506020815110156116155760009350505050611638565b8180156116325750808060200190518101906116319190612649565b5b93505050505b92915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561170e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611705906126c2565b60405180910390fd5b919050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b600060ff82169050919050565b61178b81611775565b82525050565b60006020820190506117a66000830184611782565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117eb826117c0565b9050919050565b6117fb816117e0565b811461180657600080fd5b50565b600081359050611818816117f2565b92915050565b600060208284031215611834576118336117b6565b5b600061184284828501611809565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611880816117e0565b82525050565b6000819050919050565b61189981611886565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118d95780820151818401526020810190506118be565b838111156118e8576000848401525b50505050565b6000601f19601f8301169050919050565b600061190a8261189f565b61191481856118aa565b93506119248185602086016118bb565b61192d816118ee565b840191505092915050565b600060c0830160008301516119506000860182611877565b5060208301516119636020860182611890565b5060408301516119766040860182611877565b506060830151848203606086015261198e82826118ff565b915050608083015184820360808601526119a882826118ff565b91505060a08301516119bd60a0860182611890565b508091505092915050565b60006119d48383611938565b905092915050565b6000602082019050919050565b60006119f48261184b565b6119fe8185611856565b935083602082028501611a1085611867565b8060005b85811015611a4c5784840389528151611a2d85826119c8565b9450611a38836119dc565b925060208a01995050600181019050611a14565b50829750879550505050505092915050565b60006020820190508181036000830152611a7881846119e9565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611aa557611aa4611a80565b5b8235905067ffffffffffffffff811115611ac257611ac1611a85565b5b602083019150836020820283011115611ade57611add611a8a565b5b9250929050565b60008060208385031215611afc57611afb6117b6565b5b600083013567ffffffffffffffff811115611b1a57611b196117bb565b5b611b2685828601611a8f565b92509250509250929050565b611b3b81611886565b8114611b4657600080fd5b50565b600081359050611b5881611b32565b92915050565b600060208284031215611b7457611b736117b6565b5b6000611b8284828501611b49565b91505092915050565b611b94816117e0565b82525050565b6000602082019050611baf6000830184611b8b565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bf2826118ee565b810181811067ffffffffffffffff82111715611c1157611c10611bba565b5b80604052505050565b6000611c246117ac565b9050611c308282611be9565b919050565b600067ffffffffffffffff821115611c5057611c4f611bba565b5b611c59826118ee565b9050602081019050919050565b82818337600083830152505050565b6000611c88611c8384611c35565b611c1a565b905082815260208101848484011115611ca457611ca3611bb5565b5b611caf848285611c66565b509392505050565b600082601f830112611ccc57611ccb611a80565b5b8135611cdc848260208601611c75565b91505092915050565b600060208284031215611cfb57611cfa6117b6565b5b600082013567ffffffffffffffff811115611d1957611d186117bb565b5b611d2584828501611cb7565b91505092915050565b60008083601f840112611d4457611d43611a80565b5b8235905067ffffffffffffffff811115611d6157611d60611a85565b5b602083019150836001820283011115611d7d57611d7c611a8a565b5b9250929050565b600080600060408486031215611d9d57611d9c6117b6565b5b600084013567ffffffffffffffff811115611dbb57611dba6117bb565b5b611dc786828701611d2e565b93509350506020611dda86828701611809565b9150509250925092565b611ded81611886565b82525050565b6000602082019050611e086000830184611de4565b92915050565b600080600060608486031215611e2757611e266117b6565b5b600084013567ffffffffffffffff811115611e4557611e446117bb565b5b611e5186828701611cb7565b935050602084013567ffffffffffffffff811115611e7257611e716117bb565b5b611e7e86828701611cb7565b925050604084013567ffffffffffffffff811115611e9f57611e9e6117bb565b5b611eab86828701611cb7565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f1e82611886565b9150611f2983611886565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f5e57611f5d611ee4565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611fb0602083611f69565b9150611fbb82611f7a565b602082019050919050565b60006020820190508181036000830152611fdf81611fa3565b9050919050565b7f54656d706c617465206e6f742045524337323120636f6e747261637400000000600082015250565b600061201c601c83611f69565b915061202782611fe6565b602082019050919050565b6000602082019050818103600083015261204b8161200f565b9050919050565b600081905092915050565b60006120698385612052565b9350612076838584611c66565b82840190509392505050565b600061208f82848661205d565b91508190509392505050565b60006120a68261189f565b6120b08185612052565b93506120c08185602086016118bb565b80840191505092915050565b60006120d8828461209b565b915081905092915050565b7f4261642054656d706c6174650000000000000000000000000000000000000000600082015250565b6000612119600c83611f69565b9150612124826120e3565b602082019050919050565b600060208201905081810360008301526121488161210c565b9050919050565b7f54656d706c617465206e6f74204f70656e4e465473205632206f72205633206360008201527f6f6e747261637400000000000000000000000000000000000000000000000000602082015250565b60006121ab602783611f69565b91506121b68261214f565b604082019050919050565b600060208201905081810360008301526121da8161219e565b9050919050565b60006121ec8261189f565b6121f68185611f69565b93506122068185602086016118bb565b61220f816118ee565b840191505092915050565b6000604082019050818103600083015261223481856121e1565b9050818103602083015261224881846121e1565b90509392505050565b60008115159050919050565b61226681612251565b82525050565b6000608082019050818103600083015261228681876121e1565b9050818103602083015261229a81866121e1565b90506122a96040830185611b8b565b6122b6606083018461225d565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061231b602683611f69565b9150612326826122bf565b604082019050919050565b6000602082019050818103600083015261234a8161230e565b9050919050565b60008151905061236081611b32565b92915050565b60006020828403121561237c5761237b6117b6565b5b600061238a84828501612351565b91505092915050565b60006123a66123a184611c35565b611c1a565b9050828152602081018484840111156123c2576123c1611bb5565b5b6123cd8482856118bb565b509392505050565b600082601f8301126123ea576123e9611a80565b5b81516123fa848260208601612393565b91505092915050565b600060208284031215612419576124186117b6565b5b600082015167ffffffffffffffff811115612437576124366117bb565b5b612443848285016123d5565b91505092915050565b60008151905061245b816117f2565b92915050565b600060208284031215612477576124766117b6565b5b60006124858482850161244c565b91505092915050565b7f496d706c656d656e746174696f6e206e6f742045524337323120636f6e74726160008201527f6374000000000000000000000000000000000000000000000000000000000000602082015250565b60006124ea602283611f69565b91506124f58261248e565b604082019050919050565b60006020820190508181036000830152612519816124dd565b9050919050565b600061252b82611886565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561255e5761255d611ee4565b5b600182019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61259e81612569565b82525050565b60006020820190506125b96000830184612595565b92915050565b600081519050919050565b600081905092915050565b60006125e0826125bf565b6125ea81856125ca565b93506125fa8185602086016118bb565b80840191505092915050565b600061261282846125d5565b915081905092915050565b61262681612251565b811461263157600080fd5b50565b6000815190506126438161261d565b92915050565b60006020828403121561265f5761265e6117b6565b5b600061266d84828501612634565b91505092915050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b60006126ac601683611f69565b91506126b782612676565b602082019050919050565b600060208201905081810360008301526126db8161269f565b905091905056fea26469706673582212204e7b52c969c433e96bad012b8caf60f3f146adb873e065da5ad8539fc93008ab64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b14610152578063b22beeda14610170578063ba6da050146101a0578063c17bae4f146101bc578063ddf0fc8f146101da578063f2fde38b1461020a576100a9565b806354fd4d50146100ae5780636392a51f146100cc578063715018a6146100fc57806382a1db3914610106578063845affc814610122575b600080fd5b6100b6610226565b6040516100c39190611791565b60405180910390f35b6100e660048036038101906100e1919061181e565b61022b565b6040516100f39190611a5e565b60405180910390f35b610104610318565b005b610120600480360381019061011b9190611ae5565b6103a0565b005b61013c60048036038101906101379190611b5e565b610473565b6040516101499190611b9a565b60405180910390f35b61015a6104b2565b6040516101679190611b9a565b60405180910390f35b61018a60048036038101906101859190611ce5565b6104db565b6040516101979190611b9a565b60405180910390f35b6101ba60048036038101906101b59190611d84565b610524565b005b6101c46106ce565b6040516101d19190611df3565b60405180910390f35b6101f460048036038101906101ef9190611e0e565b6106db565b6040516102019190611b9a565b60405180910390f35b610224600480360381019061021f919061181e565b6109f2565b005b600281565b606060018054905067ffffffffffffffff81111561024c5761024b611bba565b5b60405190808252806020026020018201604052801561028557816020015b610272611713565b81526020019060019003908161026a5790505b50905060005b600180549050811015610312576102e0600182815481106102af576102ae611eb5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610aea565b8282815181106102f3576102f2611eb5565b5b602002602001018190525060018161030b9190611f13565b905061028b565b50919050565b610320611194565b73ffffffffffffffffffffffffffffffffffffffff1661033e6104b2565b73ffffffffffffffffffffffffffffffffffffffff1614610394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038b90611fc6565b60405180910390fd5b61039e600061119c565b565b6103a8611194565b73ffffffffffffffffffffffffffffffffffffffff166103c66104b2565b73ffffffffffffffffffffffffffffffffffffffff161461041c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611fc6565b60405180910390fd5b60005b8282905081101561046e5761045a8383838181106104405761043f611eb5565b5b9050602002016020810190610455919061181e565b611260565b6001816104679190611f13565b905061041f565b505050565b6001818154811061048357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6002818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61052c611194565b73ffffffffffffffffffffffffffffffffffffffff1661054a6104b2565b73ffffffffffffffffffffffffffffffffffffffff16146105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059790611fc6565b60405180910390fd5b6105d06380ac58cd60e01b8273ffffffffffffffffffffffffffffffffffffffff166112db90919063ffffffff16565b61060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060690612032565b60405180910390fd5b8060028484604051610622929190612082565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828260405161067e929190612082565b60405180910390208173ffffffffffffffffffffffffffffffffffffffff167f7ef32a1c1ccb487fb9a5968c44a00b054a71860d72da8bec23ac75cfe646671260405160405180910390a3505050565b6000600180549050905090565b6000806002836040516106ee91906120cc565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561078f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107869061212f565b60405180910390fd5b6107d87fd94a1db2000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff166112db90919063ffffffff16565b8061082857506108277f9e4ad480000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff166112db90919063ffffffff16565b5b610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085e906121c1565b60405180910390fd5b6108ae60028460405161087a91906120cc565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611300565b91506108f97fd94a1db2000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff166112db90919063ffffffff16565b15610970578173ffffffffffffffffffffffffffffffffffffffff16634cd88b7686866040518363ffffffff1660e01b815260040161093992919061221a565b600060405180830381600087803b15801561095357600080fd5b505af1158015610967573d6000803e3d6000fd5b505050506109ea565b8173ffffffffffffffffffffffffffffffffffffffff16635c108a438686610996611194565b60006040518563ffffffff1660e01b81526004016109b7949392919061226c565b600060405180830381600087803b1580156109d157600080fd5b505af11580156109e5573d6000803e3d6000fd5b505050505b509392505050565b6109fa611194565b73ffffffffffffffffffffffffffffffffffffffff16610a186104b2565b73ffffffffffffffffffffffffffffffffffffffff1614610a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6590611fc6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590612331565b60405180910390fd5b610ae78161119c565b50565b610af2611713565b6000600567ffffffffffffffff811115610b0f57610b0e611bba565b5b604051908082528060200260200182016040528015610b3d5781602001602082028036833780820191505090505b5090506380ac58cd60e01b81600060ff1681518110610b5f57610b5e611eb5565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505063780e9d6360e01b81600160ff1681518110610bca57610bc9611eb5565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505063780e9d6360e01b81600260ff1681518110610c3557610c34611eb5565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250507fd94a1db20000000000000000000000000000000000000000000000000000000081600360ff1681518110610cb957610cb8611eb5565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250507f9e4ad4800000000000000000000000000000000000000000000000000000000081600460ff1681518110610d3d57610d3c611eb5565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250506000610db4828673ffffffffffffffffffffffffffffffffffffffff1661131b90919063ffffffff16565b905080600060ff1681518110610dcd57610dcc611eb5565b5b60200260200101511561118c5784836000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401610e4b9190611b9a565b60206040518083038186803b158015610e6357600080fd5b505afa158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190612366565b83602001818152505080600160ff1681518110610ebb57610eba611eb5565b5b602002602001015115610fdf578473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610f0e57600080fd5b505afa158015610f22573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f4b9190612403565b83606001819052508473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610f9957600080fd5b505afa158015610fad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610fd69190612403565b83608001819052505b80600260ff1681518110610ff657610ff5611eb5565b5b60200260200101511561108b578473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561104957600080fd5b505afa15801561105d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110819190612366565b8360a00181815250505b80600360ff16815181106110a2576110a1611eb5565b5b6020026020010151806110d0575080600460ff16815181106110c7576110c6611eb5565b5b60200260200101515b1561118b578473ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111b57600080fd5b505afa15801561112f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111539190612461565b836040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b5b505092915050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6112906380ac58cd60e01b8273ffffffffffffffffffffffffffffffffffffffff166112db90919063ffffffff16565b6112cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c690612500565b60405180910390fd5b6112d8816113ed565b50565b60006112e6836114c6565b80156112f857506112f78383611513565b5b905092915050565b600061130b8261163e565b9050611316816113ed565b919050565b60606000825167ffffffffffffffff81111561133a57611339611bba565b5b6040519080825280602002602001820160405280156113685781602001602082028036833780820191505090505b509050611374846114c6565b156113e35760005b83518110156113e1576113a98585838151811061139c5761139b611eb5565b5b6020026020010151611513565b8282815181106113bc576113bb611eb5565b5b60200260200101901515908115158152505080806113d990612520565b91505061137c565b505b8091505092915050565b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611458611194565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fe1fd48e37080a338bebd722213e17521b8a454ab4f0ef1b1a487025d5191e7a16114ae6106ce565b6040516114bb9190611df3565b60405180910390a350565b60006114f2827f01ffc9a700000000000000000000000000000000000000000000000000000000611513565b801561150c575061150a8263ffffffff60e01b611513565b155b9050919050565b6000806301ffc9a760e01b8360405160240161152f91906125a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000808573ffffffffffffffffffffffffffffffffffffffff16617530846040516115b99190612606565b6000604051808303818686fa925050503d80600081146115f5576040519150601f19603f3d011682016040523d82523d6000602084013e6115fa565b606091505b50915091506020815110156116155760009350505050611638565b8180156116325750808060200190518101906116319190612649565b5b93505050505b92915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561170e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611705906126c2565b60405180910390fd5b919050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b600060ff82169050919050565b61178b81611775565b82525050565b60006020820190506117a66000830184611782565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117eb826117c0565b9050919050565b6117fb816117e0565b811461180657600080fd5b50565b600081359050611818816117f2565b92915050565b600060208284031215611834576118336117b6565b5b600061184284828501611809565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611880816117e0565b82525050565b6000819050919050565b61189981611886565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118d95780820151818401526020810190506118be565b838111156118e8576000848401525b50505050565b6000601f19601f8301169050919050565b600061190a8261189f565b61191481856118aa565b93506119248185602086016118bb565b61192d816118ee565b840191505092915050565b600060c0830160008301516119506000860182611877565b5060208301516119636020860182611890565b5060408301516119766040860182611877565b506060830151848203606086015261198e82826118ff565b915050608083015184820360808601526119a882826118ff565b91505060a08301516119bd60a0860182611890565b508091505092915050565b60006119d48383611938565b905092915050565b6000602082019050919050565b60006119f48261184b565b6119fe8185611856565b935083602082028501611a1085611867565b8060005b85811015611a4c5784840389528151611a2d85826119c8565b9450611a38836119dc565b925060208a01995050600181019050611a14565b50829750879550505050505092915050565b60006020820190508181036000830152611a7881846119e9565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611aa557611aa4611a80565b5b8235905067ffffffffffffffff811115611ac257611ac1611a85565b5b602083019150836020820283011115611ade57611add611a8a565b5b9250929050565b60008060208385031215611afc57611afb6117b6565b5b600083013567ffffffffffffffff811115611b1a57611b196117bb565b5b611b2685828601611a8f565b92509250509250929050565b611b3b81611886565b8114611b4657600080fd5b50565b600081359050611b5881611b32565b92915050565b600060208284031215611b7457611b736117b6565b5b6000611b8284828501611b49565b91505092915050565b611b94816117e0565b82525050565b6000602082019050611baf6000830184611b8b565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bf2826118ee565b810181811067ffffffffffffffff82111715611c1157611c10611bba565b5b80604052505050565b6000611c246117ac565b9050611c308282611be9565b919050565b600067ffffffffffffffff821115611c5057611c4f611bba565b5b611c59826118ee565b9050602081019050919050565b82818337600083830152505050565b6000611c88611c8384611c35565b611c1a565b905082815260208101848484011115611ca457611ca3611bb5565b5b611caf848285611c66565b509392505050565b600082601f830112611ccc57611ccb611a80565b5b8135611cdc848260208601611c75565b91505092915050565b600060208284031215611cfb57611cfa6117b6565b5b600082013567ffffffffffffffff811115611d1957611d186117bb565b5b611d2584828501611cb7565b91505092915050565b60008083601f840112611d4457611d43611a80565b5b8235905067ffffffffffffffff811115611d6157611d60611a85565b5b602083019150836001820283011115611d7d57611d7c611a8a565b5b9250929050565b600080600060408486031215611d9d57611d9c6117b6565b5b600084013567ffffffffffffffff811115611dbb57611dba6117bb565b5b611dc786828701611d2e565b93509350506020611dda86828701611809565b9150509250925092565b611ded81611886565b82525050565b6000602082019050611e086000830184611de4565b92915050565b600080600060608486031215611e2757611e266117b6565b5b600084013567ffffffffffffffff811115611e4557611e446117bb565b5b611e5186828701611cb7565b935050602084013567ffffffffffffffff811115611e7257611e716117bb565b5b611e7e86828701611cb7565b925050604084013567ffffffffffffffff811115611e9f57611e9e6117bb565b5b611eab86828701611cb7565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f1e82611886565b9150611f2983611886565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f5e57611f5d611ee4565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611fb0602083611f69565b9150611fbb82611f7a565b602082019050919050565b60006020820190508181036000830152611fdf81611fa3565b9050919050565b7f54656d706c617465206e6f742045524337323120636f6e747261637400000000600082015250565b600061201c601c83611f69565b915061202782611fe6565b602082019050919050565b6000602082019050818103600083015261204b8161200f565b9050919050565b600081905092915050565b60006120698385612052565b9350612076838584611c66565b82840190509392505050565b600061208f82848661205d565b91508190509392505050565b60006120a68261189f565b6120b08185612052565b93506120c08185602086016118bb565b80840191505092915050565b60006120d8828461209b565b915081905092915050565b7f4261642054656d706c6174650000000000000000000000000000000000000000600082015250565b6000612119600c83611f69565b9150612124826120e3565b602082019050919050565b600060208201905081810360008301526121488161210c565b9050919050565b7f54656d706c617465206e6f74204f70656e4e465473205632206f72205633206360008201527f6f6e747261637400000000000000000000000000000000000000000000000000602082015250565b60006121ab602783611f69565b91506121b68261214f565b604082019050919050565b600060208201905081810360008301526121da8161219e565b9050919050565b60006121ec8261189f565b6121f68185611f69565b93506122068185602086016118bb565b61220f816118ee565b840191505092915050565b6000604082019050818103600083015261223481856121e1565b9050818103602083015261224881846121e1565b90509392505050565b60008115159050919050565b61226681612251565b82525050565b6000608082019050818103600083015261228681876121e1565b9050818103602083015261229a81866121e1565b90506122a96040830185611b8b565b6122b6606083018461225d565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061231b602683611f69565b9150612326826122bf565b604082019050919050565b6000602082019050818103600083015261234a8161230e565b9050919050565b60008151905061236081611b32565b92915050565b60006020828403121561237c5761237b6117b6565b5b600061238a84828501612351565b91505092915050565b60006123a66123a184611c35565b611c1a565b9050828152602081018484840111156123c2576123c1611bb5565b5b6123cd8482856118bb565b509392505050565b600082601f8301126123ea576123e9611a80565b5b81516123fa848260208601612393565b91505092915050565b600060208284031215612419576124186117b6565b5b600082015167ffffffffffffffff811115612437576124366117bb565b5b612443848285016123d5565b91505092915050565b60008151905061245b816117f2565b92915050565b600060208284031215612477576124766117b6565b5b60006124858482850161244c565b91505092915050565b7f496d706c656d656e746174696f6e206e6f742045524337323120636f6e74726160008201527f6374000000000000000000000000000000000000000000000000000000000000602082015250565b60006124ea602283611f69565b91506124f58261248e565b604082019050919050565b60006020820190508181036000830152612519816124dd565b9050919050565b600061252b82611886565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561255e5761255d611ee4565b5b600182019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61259e81612569565b82525050565b60006020820190506125b96000830184612595565b92915050565b600081519050919050565b600081905092915050565b60006125e0826125bf565b6125ea81856125ca565b93506125fa8185602086016118bb565b80840191505092915050565b600061261282846125d5565b915081905092915050565b61262681612251565b811461263157600080fd5b50565b6000815190506126438161261d565b92915050565b60006020828403121561265f5761265e6117b6565b5b600061266d84828501612634565b91505092915050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b60006126ac601683611f69565b91506126b782612676565b602082019050919050565b600060208201905081810360008301526126db8161269f565b905091905056fea26469706673582212204e7b52c969c433e96bad012b8caf60f3f146adb873e065da5ad8539fc93008ab64736f6c63430008090033",
  "devdoc": {
    "details": "is CloneFactory",
    "kind": "dev",
    "methods": {
      "balancesOf(address)": {
        "params": {
          "addr": "address of account"
        },
        "returns": {
          "nftData": "Array of nftData balances"
        }
      },
      "clone(string,string,string)": {
        "params": {
          "name": "name of Clone collection",
          "symbol": "symbol of Clone collection"
        },
        "returns": {
          "clone_": "Address of Clone collection"
        }
      },
      "implementationsAdd(address[])": {
        "params": {
          "implementationsToAdd": ": new implementations addresses"
        }
      },
      "implementationsCount()": {
        "returns": {
          "_0": "count : number of implementations"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "NFTsFactory smartcontract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balancesOf(address)": {
        "notice": "balancesOf address"
      },
      "clone(string,string,string)": {
        "notice": "clone template"
      },
      "implementations(uint256)": {
        "notice": "Implementations addresses"
      },
      "implementationsAdd(address[])": {
        "notice": "ADD Implementations public onlyOwner"
      },
      "implementationsCount()": {
        "notice": "Implementations count"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 490,
        "contract": "contracts/new/NFTsFactoryV2.sol:NFTsFactoryV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1416,
        "contract": "contracts/new/NFTsFactoryV2.sol:NFTsFactoryV2",
        "label": "implementations",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1536,
        "contract": "contracts/new/NFTsFactoryV2.sol:NFTsFactoryV2",
        "label": "templates",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0xF96de1e162B4bD3Bb6eFB313aB2A9cAAfCa037ac",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "ImplementationNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        }
      ],
      "name": "TemplateNew",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balancesOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct INFTsFactoryV2.NftData[]",
          "name": "nftData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "clone_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "implementations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "implementationsToAdd",
          "type": "address[]"
        }
      ],
      "name": "implementationsAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementationsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "templateSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "templates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3e8417b739905fd26a4f73acd515391e6113fc1d9e676978097b74d62084c0a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1316829",
    "logsBloom": "0x
    "blockHash": "0x31284bbda944a4f02a34092683fc4bbb6bf631b17a2f55d3afdc82e4294ee11c",
    "transactionHash": "0xe3e8417b739905fd26a4f73acd515391e6113fc1d9e676978097b74d62084c0a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1243146,
        "transactionHash": "0xe3e8417b739905fd26a4f73acd515391e6113fc1d9e676978097b74d62084c0a",
        "address": "0xF96de1e162B4bD3Bb6eFB313aB2A9cAAfCa037ac",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x31284bbda944a4f02a34092683fc4bbb6bf631b17a2f55d3afdc82e4294ee11c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1243146,
        "transactionHash": "0xe3e8417b739905fd26a4f73acd515391e6113fc1d9e676978097b74d62084c0a",
        "address": "0xF96de1e162B4bD3Bb6eFB313aB2A9cAAfCa037ac",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x31284bbda944a4f02a34092683fc4bbb6bf631b17a2f55d3afdc82e4294ee11c"
      }
    ],
    "blockNumber": 1243146,
    "cumulativeGasUsed": "1316829",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c"
  ],
  "numDeployments": 1,
  "solcInputHash": "21efd4c42714fb1a26095f0d17ed7883",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"ImplementationNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"}],\"name\":\"TemplateNew\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balancesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTsFactoryV2.NftData[]\",\"name\":\"nftData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"clone_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"implementationsToAdd\",\"type\":\"address[]\"}],\"name\":\"implementationsAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"templateSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"templates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"is CloneFactory\",\"kind\":\"dev\",\"methods\":{\"balancesOf(address)\":{\"params\":{\"addr\":\"address of account\"},\"returns\":{\"nftData\":\"Array of nftData balances\"}},\"clone(string,string,string)\":{\"params\":{\"name\":\"name of Clone collection\",\"symbol\":\"symbol of Clone collection\"},\"returns\":{\"clone_\":\"Address of Clone collection\"}},\"implementationsAdd(address[])\":{\"params\":{\"implementationsToAdd\":\": new implementations addresses\"}},\"implementationsCount()\":{\"returns\":{\"_0\":\"count : number of implementations\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"NFTsFactory smartcontract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balancesOf(address)\":{\"notice\":\"balancesOf address\"},\"clone(string,string,string)\":{\"notice\":\"clone template\"},\"implementations(uint256)\":{\"notice\":\"Implementations addresses\"},\"implementationsAdd(address[])\":{\"notice\":\"ADD Implementations public onlyOwner\"},\"implementationsCount()\":{\"notice\":\"Implementations count\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/new/NFTsFactoryV2.sol\":\"NFTsFactoryV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/deployed/interfaces/IOpenNFTsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV2 {\\n    function transferOwnership(address newOwner) external;\\n\\n    function initialize(string memory name, string memory symbol) external;\\n\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function owner() external view returns (address owner);\\n}\\n\",\"keccak256\":\"0x0ca6b580e50044c8103a61a0d394c149550f03517c9600dce97ab8c73748790c\",\"license\":\"MIT\"},\"contracts/new/CloneFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/ICloneFactoryV2.sol\\\";\\n\\n/// @title Clone Factory\\n/// @notice Generic Clone Factory to create multiple Clones from Templates\\n/// @dev CloneFactory is ICloneFactory and Ownable\\ncontract CloneFactoryV2 is ICloneFactoryV2, Ownable {\\n    /// @notice Implementations addresses\\n    address[] public implementations;\\n\\n    /// @notice Implementations count\\n    /// @return count : number of implementations\\n    function implementationsCount() public view override(ICloneFactoryV2) returns (uint256) {\\n        return implementations.length;\\n    }\\n\\n    /// @notice ADD Implementations public onlyOwner\\n    /// @param  implementationsToAdd : new implementations addresses\\n    function implementationsAdd(address[] calldata implementationsToAdd) external override(ICloneFactoryV2) onlyOwner {\\n        for (uint256 i = 0; i < implementationsToAdd.length; i += 1) {\\n            _implementationAdd(implementationsToAdd[i]);\\n        }\\n    }\\n\\n    /// @notice ADD Implementation internal\\n    /// @param  implementationToAdd : implementation address\\n    function _implementationAdd(address implementationToAdd) internal virtual {\\n        _implementationNew(implementationToAdd);\\n    }\\n\\n    /// @notice Clone Template\\n    /// @param  template : template address\\n    /// @return addr : clone address\\n    function _clone(address template) internal returns (address addr) {\\n        /// @notice clone template and get clone address\\n        addr = Clones.clone(template);\\n\\n        /// @notice register clone as new implementation\\n        _implementationNew(addr);\\n    }\\n\\n    /// @notice NEW Implementation internal\\n    /// @param  implementation : implementation address\\n    function _implementationNew(address implementation) internal {\\n        /// @notice register implementation\\n        implementations.push(implementation);\\n\\n        /// @notice emit event ImplementationNew\\n        emit ImplementationNew(implementation, _msgSender(), implementationsCount());\\n    }\\n}\\n\",\"keccak256\":\"0x4bf59dcdc0a0ff3861802ac68ca700a83fe2412b24d2d4bcf55ca8b9e8153847\",\"license\":\"MIT\"},\"contracts/new/NFTsFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./CloneFactoryV2.sol\\\";\\nimport \\\"./interfaces/INFTsFactoryV2.sol\\\";\\nimport \\\"./interfaces/IOpenNFTsV3.sol\\\";\\nimport \\\"../deployed/interfaces/IOpenNFTsV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/// @title NFTsFactory smartcontract\\n/// @dev is CloneFactory\\ncontract NFTsFactoryV2 is CloneFactoryV2, INFTsFactoryV2 {\\n    using ERC165Checker for address;\\n\\n    mapping(string => address) public templates;\\n\\n    uint8 public constant version = 2;\\n\\n    uint8 internal constant ERC721 = 0;\\n    uint8 internal constant ERC721_METADATA = 1;\\n    uint8 internal constant ERC721_ENUMERABLE = 2;\\n    uint8 internal constant OPEN_NFTS_V2 = 3;\\n    uint8 internal constant OPEN_NFTS_V3 = 4;\\n\\n    bytes4 internal constant ERC721_SIG = bytes4(0x80ac58cd);\\n    bytes4 internal constant ERC721_METADATA_SIG = bytes4(0x780e9d63);\\n    bytes4 internal constant ERC721_ENUMERABLE_SIG = bytes4(0x780e9d63);\\n    bytes4 internal constant OPEN_NFTS_V2_SIG = type(IOpenNFTsV2).interfaceId;\\n    bytes4 internal constant OPEN_NFTS_V3_SIG = type(IOpenNFTsV3).interfaceId;\\n\\n    constructor(address initialOwner) {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /// @notice balancesOf address\\n    /// @param addr  address of account\\n    /// @return nftData Array of nftData balances\\n    function balancesOf(address addr) external view override(INFTsFactoryV2) returns (NftData[] memory nftData) {\\n        nftData = new NftData[](implementations.length);\\n        for (uint256 i = 0; i < implementations.length; i += 1) {\\n            nftData[i] = balanceOf(implementations[i], addr);\\n        }\\n    }\\n\\n    function templateSet(string calldata templateName, address template) external onlyOwner {\\n        require(template.supportsInterface(ERC721_SIG), \\\"Template not ERC721 contract\\\");\\n        templates[templateName] = template;\\n\\n        emit TemplateNew(template, templateName);\\n    }\\n\\n    /// @notice clone template\\n    /// @param name name of Clone collection\\n    /// @param symbol symbol of Clone collection\\n    /// @return clone_ Address of Clone collection\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName\\n    ) external override(INFTsFactoryV2) returns (address clone_) {\\n        address template = templates[templateName];\\n        require(template != address(0), \\\"Bad Template\\\");\\n        require(\\n            template.supportsInterface(OPEN_NFTS_V2_SIG) || template.supportsInterface(OPEN_NFTS_V3_SIG),\\n            \\\"Template not OpenNFTs V2 or V3 contract\\\"\\n        );\\n        clone_ = _clone(templates[templateName]);\\n\\n        if (template.supportsInterface(OPEN_NFTS_V2_SIG)) {\\n            IOpenNFTsV2(clone_).initialize(name, symbol);\\n        } else {\\n            IOpenNFTsV3(clone_).initialize(name, symbol, _msgSender(), false);\\n        }\\n    }\\n\\n    /// @notice ADD Implementation internal\\n    /// @param  implementationToAdd : implementation address\\n    function _implementationAdd(address implementationToAdd) internal override(CloneFactoryV2) {\\n        require(implementationToAdd.supportsInterface(ERC721_SIG), \\\"Implementation not ERC721 contract\\\");\\n        super._implementationNew(implementationToAdd);\\n    }\\n\\n    /// @notice balanceOf\\n    /// @param nft nft address of NFT collection\\n    /// @param owner address of account\\n    /// @return nftData nftData balances\\n    function balanceOf(address nft, address owner) internal view returns (NftData memory nftData) {\\n        bytes4[] memory iface = new bytes4[](5);\\n        iface[ERC721] = ERC721_SIG;\\n        iface[ERC721_METADATA] = ERC721_METADATA_SIG;\\n        iface[ERC721_ENUMERABLE] = ERC721_ENUMERABLE_SIG;\\n        iface[OPEN_NFTS_V2] = OPEN_NFTS_V2_SIG;\\n        iface[OPEN_NFTS_V3] = OPEN_NFTS_V3_SIG;\\n        bool[] memory supportInterface = nft.getSupportedInterfaces(iface);\\n\\n        if (supportInterface[ERC721]) {\\n            nftData.nft = nft;\\n            nftData.balanceOf = IERC721(nft).balanceOf(owner);\\n\\n            if (supportInterface[ERC721_METADATA]) {\\n                nftData.name = IERC721Metadata(nft).name();\\n                nftData.symbol = IERC721Metadata(nft).symbol();\\n            }\\n\\n            if (supportInterface[ERC721_ENUMERABLE]) {\\n                nftData.totalSupply = IERC721Enumerable(nft).totalSupply();\\n            }\\n\\n            if (supportInterface[OPEN_NFTS_V2] || supportInterface[OPEN_NFTS_V3]) {\\n                nftData.owner = OwnableUpgradeable(nft).owner();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdfcc398065913e64a8f58df85f548e1cc4492b1c2ca737770f6a0afbde082d15\",\"license\":\"MIT\"},\"contracts/new/interfaces/ICloneFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface ICloneFactoryV2 {\\n    event ImplementationNew(address indexed implementation, address indexed creator, uint256 count);\\n\\n    function implementationsCount() external view returns (uint256);\\n\\n    function implementations(uint256 index) external view returns (address);\\n\\n    function implementationsAdd(address[] calldata implementationToAdd) external;\\n}\\n\",\"keccak256\":\"0x1db23c7f50f7c2b5ea9d95983359b177f0b62cdb2a36addf1762d97af3d7d80a\",\"license\":\"MIT\"},\"contracts/new/interfaces/INFTsFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface INFTsFactoryV2 {\\n    struct NftData {\\n        address nft;\\n        uint256 balanceOf;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n    }\\n\\n    event TemplateNew(address indexed template, string indexed templateName);\\n\\n    function version() external view returns (uint8);\\n\\n    function balancesOf(address owner) external view returns (NftData[] memory);\\n\\n    function templateSet(string calldata templateName, address template) external;\\n\\n    function templates(string calldata) external view returns (address);\\n\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x32606c3ee03aa982c2589af1e97afc2a9190d4f81c175963fbb24654e94f2f08\",\"license\":\"MIT\"},\"contracts/new/interfaces/IOpenNFTsV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTsV3 {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool openMinting\\n    ) external;\\n\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x751a09d9eb60f1b6b2d17927da15b053404d7ac6ca7b779f7da2184bea83a92c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051620017223803806200172283398101604081905261003191610099565b61003a33610049565b61004381610049565b506100c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ab57600080fd5b81516001600160a01b03811681146100c257600080fd5b9392505050565b61164980620000d96000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b14610135578063b22beeda14610146578063ba6da0501461017a578063c17bae4f1461018d578063ddf0fc8f1461019e578063f2fde38b146101b157600080fd5b806354fd4d50146100ae5780636392a51f146100cd578063715018a6146100ed57806382a1db39146100f7578063845affc81461010a575b600080fd5b6100b6600281565b60405160ff90911681526020015b60405180910390f35b6100e06100db366004611043565b6101c4565b6040516100c491906110bc565b6100f5610291565b005b6100f561010536600461117d565b6102d0565b61011d6101183660046111f2565b61034b565b6040516001600160a01b0390911681526020016100c4565b6000546001600160a01b031661011d565b61011d6101543660046112d0565b80516020818301810180516002825292820191909301209152546001600160a01b031681565b6100f561018836600461130d565b610375565b6001546040519081526020016100c4565b61011d6101ac366004611390565b610495565b6100f56101bf366004611043565b6106ba565b60015460609067ffffffffffffffff8111156101e2576101e261120b565b60405190808252806020026020018201604052801561021b57816020015b610208610fe6565b8152602001906001900390816102005790505b50905060005b60015481101561028b5761025c6001828154811061024157610241611418565b6000918252602090912001546001600160a01b031684610755565b82828151811061026e5761026e611418565b6020908102919091010152610284600182611444565b9050610221565b50919050565b6000546001600160a01b031633146102c45760405162461bcd60e51b81526004016102bb9061145c565b60405180910390fd5b6102ce6000610bd1565b565b6000546001600160a01b031633146102fa5760405162461bcd60e51b81526004016102bb9061145c565b60005b818110156103465761033483838381811061031a5761031a611418565b905060200201602081019061032f9190611043565b610c21565b61033f600182611444565b90506102fd565b505050565b6001818154811061035b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b0316331461039f5760405162461bcd60e51b81526004016102bb9061145c565b6103b96001600160a01b0382166380ac58cd60e01b610c9b565b6104055760405162461bcd60e51b815260206004820152601c60248201527f54656d706c617465206e6f742045524337323120636f6e74726163740000000060448201526064016102bb565b8060028484604051610418929190611491565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091556104559084908490611491565b604051908190038120906001600160a01b038316907f7ef32a1c1ccb487fb9a5968c44a00b054a71860d72da8bec23ac75cfe646671290600090a3505050565b6000806002836040516104a891906114a1565b908152604051908190036020019020546001600160a01b03169050806104ff5760405162461bcd60e51b815260206004820152600c60248201526b4261642054656d706c61746560a01b60448201526064016102bb565b6105196001600160a01b038216636ca50ed960e11b610c9b565b8061053957506105396001600160a01b03821663013c95a960e71b610c9b565b6105955760405162461bcd60e51b815260206004820152602760248201527f54656d706c617465206e6f74204f70656e4e465473205632206f7220563320636044820152661bdb9d1c9858dd60ca1b60648201526084016102bb565b6105c66002846040516105a891906114a1565b908152604051908190036020019020546001600160a01b0316610cc0565b91506105e26001600160a01b038216636ca50ed960e11b610c9b565b1561064c5760405163266c45bb60e11b81526001600160a01b03831690634cd88b769061061590889088906004016114bd565b600060405180830381600087803b15801561062f57600080fd5b505af1158015610643573d6000803e3d6000fd5b505050506106b2565b604051635c108a4360e01b81526001600160a01b03831690635c108a439061067f908890889033906000906004016114eb565b600060405180830381600087803b15801561069957600080fd5b505af11580156106ad573d6000803e3d6000fd5b505050505b509392505050565b6000546001600160a01b031633146106e45760405162461bcd60e51b81526004016102bb9061145c565b6001600160a01b0381166107495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bb565b61075281610bd1565b50565b61075d610fe6565b60408051600580825260c082019092526000916020820160a080368337505081519192506380ac58cd60e01b9183915060009061079c5761079c611418565b6001600160e01b031990921660209283029190910190910152805163780e9d6360e01b90829060019081106107d3576107d3611418565b6001600160e01b031990921660209283029190910190910152805163780e9d6360e01b908290600290811061080a5761080a611418565b6001600160e01b0319909216602092830291909101909101528051636ca50ed960e11b908290600390811061084157610841611418565b6001600160e01b031990921660209283029190910190910152805163013c95a960e71b908290600490811061087857610878611418565b6001600160e01b03199092166020928302919091019091015260006108a66001600160a01b03861683610cdb565b905080600060ff16815181106108be576108be611418565b602002602001015115610bc9576001600160a01b038581168085526040516370a0823160e01b81529186166004830152906370a082319060240160206040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190611532565b602084015280518190600190811061096257610962611418565b602002602001015115610a6757846001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156109a857600080fd5b505afa1580156109bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e4919081019061154b565b8360600181905250846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610a2557600080fd5b505afa158015610a39573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a61919081019061154b565b60808401525b80600260ff1681518110610a7d57610a7d611418565b602002602001015115610b0157846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac357600080fd5b505afa158015610ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afb9190611532565b60a08401525b80600360ff1681518110610b1757610b17611418565b602002602001015180610b44575080600460ff1681518110610b3b57610b3b611418565b60200260200101515b15610bc957846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8257600080fd5b505afa158015610b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bba91906115b9565b6001600160a01b031660408401525b505092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c3b6001600160a01b0382166380ac58cd60e01b610c9b565b610c925760405162461bcd60e51b815260206004820152602260248201527f496d706c656d656e746174696f6e206e6f742045524337323120636f6e74726160448201526118dd60f21b60648201526084016102bb565b61075281610d96565b6000610ca683610e32565b8015610cb75750610cb78383610e65565b90505b92915050565b6000610ccb82610f4e565b9050610cd681610d96565b919050565b60606000825167ffffffffffffffff811115610cf957610cf961120b565b604051908082528060200260200182016040528015610d22578160200160208202803683370190505b509050610d2e84610e32565b15610cb75760005b83518110156106b257610d6285858381518110610d5557610d55611418565b6020026020010151610e65565b828281518110610d7457610d74611418565b9115156020928302919091019091015280610d8e816115d6565b915050610d36565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038316179055336001600160a01b0316816001600160a01b03167fe1fd48e37080a338bebd722213e17521b8a454ab4f0ef1b1a487025d5191e7a1610e1e60015490565b60405190815260200160405180910390a350565b6000610e45826301ffc9a760e01b610e65565b8015610cba5750610e5e826001600160e01b0319610e65565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090610ecc9086906114a1565b6000604051808303818686fa925050503d8060008114610f08576040519150601f19603f3d011682016040523d82523d6000602084013e610f0d565b606091505b5091509150602081511015610f285760009350505050610cba565b818015610f44575080806020019051810190610f4491906115f1565b9695505050505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610cd65760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016102bb565b6040518060c0016040528060006001600160a01b031681526020016000815260200160006001600160a01b031681526020016060815260200160608152602001600081525090565b6001600160a01b038116811461075257600080fd5b60006020828403121561105557600080fd5b8135610cb78161102e565b60005b8381101561107b578181015183820152602001611063565b8381111561108a576000848401525b50505050565b600081518084526110a8816020860160208601611060565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561116f57888303603f19018552815180516001600160a01b039081168552888201518986015287820151168785015260608082015160c0828701819052919061113283880182611090565b925050506080808301518683038288015261114d8382611090565b60a09485015197909401969096525050948701949250908601906001016110e3565b509098975050505050505050565b6000806020838503121561119057600080fd5b823567ffffffffffffffff808211156111a857600080fd5b818501915085601f8301126111bc57600080fd5b8135818111156111cb57600080fd5b8660208260051b85010111156111e057600080fd5b60209290920196919550909350505050565b60006020828403121561120457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561124a5761124a61120b565b604052919050565b600067ffffffffffffffff82111561126c5761126c61120b565b50601f01601f191660200190565b600082601f83011261128b57600080fd5b813561129e61129982611252565b611221565b8181528460208386010111156112b357600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156112e257600080fd5b813567ffffffffffffffff8111156112f957600080fd5b6113058482850161127a565b949350505050565b60008060006040848603121561132257600080fd5b833567ffffffffffffffff8082111561133a57600080fd5b818601915086601f83011261134e57600080fd5b81358181111561135d57600080fd5b87602082850101111561136f57600080fd5b602092830195509350508401356113858161102e565b809150509250925092565b6000806000606084860312156113a557600080fd5b833567ffffffffffffffff808211156113bd57600080fd5b6113c98783880161127a565b945060208601359150808211156113df57600080fd5b6113eb8783880161127a565b9350604086013591508082111561140157600080fd5b5061140e8682870161127a565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156114575761145761142e565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8183823760009101908152919050565b600082516114b3818460208701611060565b9190910192915050565b6040815260006114d06040830185611090565b82810360208401526114e28185611090565b95945050505050565b6080815260006114fe6080830187611090565b82810360208401526115108187611090565b6001600160a01b03959095166040840152505090151560609091015292915050565b60006020828403121561154457600080fd5b5051919050565b60006020828403121561155d57600080fd5b815167ffffffffffffffff81111561157457600080fd5b8201601f8101841361158557600080fd5b805161159361129982611252565b8181528560208385010111156115a857600080fd5b6114e2826020830160208601611060565b6000602082840312156115cb57600080fd5b8151610cb78161102e565b60006000198214156115ea576115ea61142e565b5060010190565b60006020828403121561160357600080fd5b81518015158114610cb757600080fdfea264697066735822122006a49ffdd670c629026f1c89495ff56a012bfd8ba51f4c1672dec18abc11f89364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b14610135578063b22beeda14610146578063ba6da0501461017a578063c17bae4f1461018d578063ddf0fc8f1461019e578063f2fde38b146101b157600080fd5b806354fd4d50146100ae5780636392a51f146100cd578063715018a6146100ed57806382a1db39146100f7578063845affc81461010a575b600080fd5b6100b6600281565b60405160ff90911681526020015b60405180910390f35b6100e06100db366004611043565b6101c4565b6040516100c491906110bc565b6100f5610291565b005b6100f561010536600461117d565b6102d0565b61011d6101183660046111f2565b61034b565b6040516001600160a01b0390911681526020016100c4565b6000546001600160a01b031661011d565b61011d6101543660046112d0565b80516020818301810180516002825292820191909301209152546001600160a01b031681565b6100f561018836600461130d565b610375565b6001546040519081526020016100c4565b61011d6101ac366004611390565b610495565b6100f56101bf366004611043565b6106ba565b60015460609067ffffffffffffffff8111156101e2576101e261120b565b60405190808252806020026020018201604052801561021b57816020015b610208610fe6565b8152602001906001900390816102005790505b50905060005b60015481101561028b5761025c6001828154811061024157610241611418565b6000918252602090912001546001600160a01b031684610755565b82828151811061026e5761026e611418565b6020908102919091010152610284600182611444565b9050610221565b50919050565b6000546001600160a01b031633146102c45760405162461bcd60e51b81526004016102bb9061145c565b60405180910390fd5b6102ce6000610bd1565b565b6000546001600160a01b031633146102fa5760405162461bcd60e51b81526004016102bb9061145c565b60005b818110156103465761033483838381811061031a5761031a611418565b905060200201602081019061032f9190611043565b610c21565b61033f600182611444565b90506102fd565b505050565b6001818154811061035b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b0316331461039f5760405162461bcd60e51b81526004016102bb9061145c565b6103b96001600160a01b0382166380ac58cd60e01b610c9b565b6104055760405162461bcd60e51b815260206004820152601c60248201527f54656d706c617465206e6f742045524337323120636f6e74726163740000000060448201526064016102bb565b8060028484604051610418929190611491565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091556104559084908490611491565b604051908190038120906001600160a01b038316907f7ef32a1c1ccb487fb9a5968c44a00b054a71860d72da8bec23ac75cfe646671290600090a3505050565b6000806002836040516104a891906114a1565b908152604051908190036020019020546001600160a01b03169050806104ff5760405162461bcd60e51b815260206004820152600c60248201526b4261642054656d706c61746560a01b60448201526064016102bb565b6105196001600160a01b038216636ca50ed960e11b610c9b565b8061053957506105396001600160a01b03821663013c95a960e71b610c9b565b6105955760405162461bcd60e51b815260206004820152602760248201527f54656d706c617465206e6f74204f70656e4e465473205632206f7220563320636044820152661bdb9d1c9858dd60ca1b60648201526084016102bb565b6105c66002846040516105a891906114a1565b908152604051908190036020019020546001600160a01b0316610cc0565b91506105e26001600160a01b038216636ca50ed960e11b610c9b565b1561064c5760405163266c45bb60e11b81526001600160a01b03831690634cd88b769061061590889088906004016114bd565b600060405180830381600087803b15801561062f57600080fd5b505af1158015610643573d6000803e3d6000fd5b505050506106b2565b604051635c108a4360e01b81526001600160a01b03831690635c108a439061067f908890889033906000906004016114eb565b600060405180830381600087803b15801561069957600080fd5b505af11580156106ad573d6000803e3d6000fd5b505050505b509392505050565b6000546001600160a01b031633146106e45760405162461bcd60e51b81526004016102bb9061145c565b6001600160a01b0381166107495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bb565b61075281610bd1565b50565b61075d610fe6565b60408051600580825260c082019092526000916020820160a080368337505081519192506380ac58cd60e01b9183915060009061079c5761079c611418565b6001600160e01b031990921660209283029190910190910152805163780e9d6360e01b90829060019081106107d3576107d3611418565b6001600160e01b031990921660209283029190910190910152805163780e9d6360e01b908290600290811061080a5761080a611418565b6001600160e01b0319909216602092830291909101909101528051636ca50ed960e11b908290600390811061084157610841611418565b6001600160e01b031990921660209283029190910190910152805163013c95a960e71b908290600490811061087857610878611418565b6001600160e01b03199092166020928302919091019091015260006108a66001600160a01b03861683610cdb565b905080600060ff16815181106108be576108be611418565b602002602001015115610bc9576001600160a01b038581168085526040516370a0823160e01b81529186166004830152906370a082319060240160206040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190611532565b602084015280518190600190811061096257610962611418565b602002602001015115610a6757846001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156109a857600080fd5b505afa1580156109bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e4919081019061154b565b8360600181905250846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610a2557600080fd5b505afa158015610a39573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a61919081019061154b565b60808401525b80600260ff1681518110610a7d57610a7d611418565b602002602001015115610b0157846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac357600080fd5b505afa158015610ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afb9190611532565b60a08401525b80600360ff1681518110610b1757610b17611418565b602002602001015180610b44575080600460ff1681518110610b3b57610b3b611418565b60200260200101515b15610bc957846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8257600080fd5b505afa158015610b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bba91906115b9565b6001600160a01b031660408401525b505092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c3b6001600160a01b0382166380ac58cd60e01b610c9b565b610c925760405162461bcd60e51b815260206004820152602260248201527f496d706c656d656e746174696f6e206e6f742045524337323120636f6e74726160448201526118dd60f21b60648201526084016102bb565b61075281610d96565b6000610ca683610e32565b8015610cb75750610cb78383610e65565b90505b92915050565b6000610ccb82610f4e565b9050610cd681610d96565b919050565b60606000825167ffffffffffffffff811115610cf957610cf961120b565b604051908082528060200260200182016040528015610d22578160200160208202803683370190505b509050610d2e84610e32565b15610cb75760005b83518110156106b257610d6285858381518110610d5557610d55611418565b6020026020010151610e65565b828281518110610d7457610d74611418565b9115156020928302919091019091015280610d8e816115d6565b915050610d36565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038316179055336001600160a01b0316816001600160a01b03167fe1fd48e37080a338bebd722213e17521b8a454ab4f0ef1b1a487025d5191e7a1610e1e60015490565b60405190815260200160405180910390a350565b6000610e45826301ffc9a760e01b610e65565b8015610cba5750610e5e826001600160e01b0319610e65565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090610ecc9086906114a1565b6000604051808303818686fa925050503d8060008114610f08576040519150601f19603f3d011682016040523d82523d6000602084013e610f0d565b606091505b5091509150602081511015610f285760009350505050610cba565b818015610f44575080806020019051810190610f4491906115f1565b9695505050505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610cd65760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016102bb565b6040518060c0016040528060006001600160a01b031681526020016000815260200160006001600160a01b031681526020016060815260200160608152602001600081525090565b6001600160a01b038116811461075257600080fd5b60006020828403121561105557600080fd5b8135610cb78161102e565b60005b8381101561107b578181015183820152602001611063565b8381111561108a576000848401525b50505050565b600081518084526110a8816020860160208601611060565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561116f57888303603f19018552815180516001600160a01b039081168552888201518986015287820151168785015260608082015160c0828701819052919061113283880182611090565b925050506080808301518683038288015261114d8382611090565b60a09485015197909401969096525050948701949250908601906001016110e3565b509098975050505050505050565b6000806020838503121561119057600080fd5b823567ffffffffffffffff808211156111a857600080fd5b818501915085601f8301126111bc57600080fd5b8135818111156111cb57600080fd5b8660208260051b85010111156111e057600080fd5b60209290920196919550909350505050565b60006020828403121561120457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561124a5761124a61120b565b604052919050565b600067ffffffffffffffff82111561126c5761126c61120b565b50601f01601f191660200190565b600082601f83011261128b57600080fd5b813561129e61129982611252565b611221565b8181528460208386010111156112b357600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156112e257600080fd5b813567ffffffffffffffff8111156112f957600080fd5b6113058482850161127a565b949350505050565b60008060006040848603121561132257600080fd5b833567ffffffffffffffff8082111561133a57600080fd5b818601915086601f83011261134e57600080fd5b81358181111561135d57600080fd5b87602082850101111561136f57600080fd5b602092830195509350508401356113858161102e565b809150509250925092565b6000806000606084860312156113a557600080fd5b833567ffffffffffffffff808211156113bd57600080fd5b6113c98783880161127a565b945060208601359150808211156113df57600080fd5b6113eb8783880161127a565b9350604086013591508082111561140157600080fd5b5061140e8682870161127a565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156114575761145761142e565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8183823760009101908152919050565b600082516114b3818460208701611060565b9190910192915050565b6040815260006114d06040830185611090565b82810360208401526114e28185611090565b95945050505050565b6080815260006114fe6080830187611090565b82810360208401526115108187611090565b6001600160a01b03959095166040840152505090151560609091015292915050565b60006020828403121561154457600080fd5b5051919050565b60006020828403121561155d57600080fd5b815167ffffffffffffffff81111561157457600080fd5b8201601f8101841361158557600080fd5b805161159361129982611252565b8181528560208385010111156115a857600080fd5b6114e2826020830160208601611060565b6000602082840312156115cb57600080fd5b8151610cb78161102e565b60006000198214156115ea576115ea61142e565b5060010190565b60006020828403121561160357600080fd5b81518015158114610cb757600080fdfea264697066735822122006a49ffdd670c629026f1c89495ff56a012bfd8ba51f4c1672dec18abc11f89364736f6c63430008090033",
  "devdoc": {
    "details": "is CloneFactory",
    "kind": "dev",
    "methods": {
      "balancesOf(address)": {
        "params": {
          "addr": "address of account"
        },
        "returns": {
          "nftData": "Array of nftData balances"
        }
      },
      "clone(string,string,string)": {
        "params": {
          "name": "name of Clone collection",
          "symbol": "symbol of Clone collection"
        },
        "returns": {
          "clone_": "Address of Clone collection"
        }
      },
      "implementationsAdd(address[])": {
        "params": {
          "implementationsToAdd": ": new implementations addresses"
        }
      },
      "implementationsCount()": {
        "returns": {
          "_0": "count : number of implementations"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "NFTsFactory smartcontract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balancesOf(address)": {
        "notice": "balancesOf address"
      },
      "clone(string,string,string)": {
        "notice": "clone template"
      },
      "implementations(uint256)": {
        "notice": "Implementations addresses"
      },
      "implementationsAdd(address[])": {
        "notice": "ADD Implementations public onlyOwner"
      },
      "implementationsCount()": {
        "notice": "Implementations count"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2412,
        "contract": "contracts/new/NFTsFactoryV2.sol:NFTsFactoryV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6261,
        "contract": "contracts/new/NFTsFactoryV2.sol:NFTsFactoryV2",
        "label": "implementations",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6566,
        "contract": "contracts/new/NFTsFactoryV2.sol:NFTsFactoryV2",
        "label": "templates",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}